{
	"page": {
		"home": {
			"en": {
				"dest": "tmp/en/index.html"
			},
			"fr": {
				"dest": "tmp/fr/index.html"
			}
		},
		"posts": {
			"en": {
				"order": 1,
				"title": "posts",
				"url": "posts.html",
				"dest": "tmp/en/posts.html"
			},
			"fr": {
				"order": 1,
				"title": "posts",
				"url": "posts.html",
				"dest": "tmp/fr/posts.html"
			}
		},
		"about": {
			"en": {
				"src": "src/about.md",
				"dest": "tmp/en/about.html",
				"url": "about.html",
				"fullUrl": "http://krampstudio.com/en/about.html",
				"blogName": "Krampstudio",
				"lang": "en",
				"fileTitle": "about",
				"content": "<p>Petit blog à base d&#39;<a href=\"http://octopress.org\">Octopress</a>, hébergé sur <a href=\"http://pages.github.com/\">Github-Pages</a>, édité depuis <a href=\"http://www.vim.org/\">Vim</a> et produit de réflexions et d&#39;expériences sur le web, l&#39;open source, le développement, la veille techno, et tout ces trucs plutôt abstraits mais qui rendent tout ça intéressant. </p>\n<p>Dans ce blog je traiterais des sujets qui m&#39;intéresse et je ne serais absoluement pas objectif. Je parlerais forcément en mal de Micrxsxft et de mes mauvaises expériences avec leur OS pas du tout fait pour développer ou d&#39;Orxcle (et là c&#39;est pas forcément subjectif, essayez d&#39;installer une 10g sur un CentOS 64bits et on en reparle). Et dirais forcément du bien de tout projet libre ou open-source (sauf de Libre Office, il faut pas pousser) ou de Javascript (parce que <em>ca défonce, c&#39;est la mode</em>).</p>\n<p>Enfin voilà, tout ça dans ma langue maternelle plutôt que dans un mauvais anglais. </p>\n<script type=\"text/javascript\">\n    document.location = 'index.html?state=about.html';\n</script>\n",
				"layout": "page",
				"author": "@kramp",
				"title": "about",
				"date": "2013-02-06 21:51",
				"order": 12,
				"comments": false,
				"sharing": true,
				"footer": true
			}
		},
		"projects": {
			"en": {
				"src": "src/projects.md",
				"dest": "tmp/en/projects.html",
				"url": "projects.html",
				"fullUrl": "http://krampstudio.com/en/projects.html",
				"blogName": "Krampstudio",
				"lang": "en",
				"fileTitle": "projects",
				"content": "<p>Voici quelques-un de mes projets réalisés ou en cours de réalisation. La plupart sont open-source et ne demandent qu&#39;à être améliorés. Ce sont des <em>pets projects</em> développés en dehors du cadre professionnels, sur mon temps libre.</p>\n<h2 id=\"patroni\">Patroni</h2>\n<p>C&#39;est le premier projet de Krampstudio, une plateforme de consultation en ligne pour les avocats, un vrai cabinet virtuel. Un site dédié est en ligne: <a href=\"http://patroni.fr\">patroni.fr</a>.\nIl exsite une implémentation complète de la plateforme: <a href=\"http://monavocat-enligne.fr\">monavocat-enligne.fr</a>.</p>\n<h2 id=\"jquery-ui-l2l\">jQuery UI L2L</h2>\n<p>Un plugin jQuery UI qui inclut un widget de type <em>list-to-list</em>, c&#39;est-à-dire qui permet de manipuler des connexions entre plusieurs listes d&#39;éléments.</p>\n<ul>\n<li><a href=\"http://krampstudio.com/jquerui-l2l/\">Site de démonstration</a></li>\n<li><a href=\"https://github.com/krampstudio/jquerui-l2l/\">Github</a></li>\n<li><a href=\"http://plugins.jquery.com/jqueryui-l2l/\">jQuery Plugin Repository</a></li>\n</ul>\n<h2 id=\"grunt-jsdoc\">Grunt Jsdoc</h2>\n<p>Un plugin Grunt, l&#39;outils de build de Node.js, qui permet de générer la documentation de type <a href=\"http://usejsdoc.org\">JsDoc3</a> d&#39;un projet JavaScript.</p>\n<ul>\n<li><a href=\"https://github.com/krampstudio/grunt-jsdoc-plugin/\">Github</a></li>\n<li><a href=\"http://gruntjs.com/plugins/jsdoc\">Grunt Plugin Repository</a></li>\n<li><a href=\"https://npmjs.org/package/grunt-jsdoc\">NPM Repository</a></li>\n</ul>\n<p><img src=\"https://nodei.co/npm/grunt-jsdoc.png?downloads=true&amp;stars=true\" alt=\"NPM Badge\"></p>\n<h2 id=\"grunt-bower-postinst\">Grunt Bower PostInst</h2>\n<p>Un plugin Grunt, qui permet de lancer des commandes de post installation sur des composants <a href=\"http://bower.io\">Bower</a>. Cela permet de compléter l&#39;automatisation de l&#39;installation  des dépendances clientes via Grunt.</p>\n<ul>\n<li><a href=\"https://github.com/krampstudio/grunt-bower-postinst/\">Github</a></li>\n<li><a href=\"http://gruntjs.com/plugins/bower-postinst\">Grunt Plugin Repository</a></li>\n<li><a href=\"https://npmjs.org/package/grunt-bower-postinst\">NPM Repository</a></li>\n</ul>\n<p><img src=\"https://nodei.co/npm/grunt-bower-postinst.png?downloads=true&amp;stars=true\" alt=\"NPM Badge\"></p>\n",
				"layout": "page",
				"title": "projects",
				"date": "2013-07-04 07:49",
				"order": 11,
				"comments": true,
				"sharing": true,
				"footer": true
			}
		}
	},
	"post": {
		"Et c'est parti avec octopress": {
			"en": {
				"src": "src/posts/2012-09-13-et-cest-parti-avec-octopress-en.md",
				"dest": "tmp/en/posts/2012-09-13-et-cest-parti-avec-octopress.html",
				"url": "posts/2012-09-13-et-cest-parti-avec-octopress.html",
				"fullUrl": "http://krampstudio.com/en/posts/2012-09-13-et-cest-parti-avec-octopress.html",
				"blogName": "Krampstudio",
				"lang": "en",
				"fileTitle": "2012-09-13-et-cest-parti-avec-octopress",
				"content": "<p>Voilà c&#39;est fait, cela faisait un petit moment que j&#39;avais cette idée en tête, et deux jours d&#39;arrêt maladie (obligé de rester à la maison parce que contagieux) m&#39;ont permis de prendre quelques heures pour configurer et mettre en ligne ce blog, avec le moteur de génération de blog <a href=\"http://octopress.org\">Octopress</a>.\nQuand je dis quelques heures, c&#39;est vraiement le cas. Octopress cible un public de <em>hackers</em> (le slogan étant <em>A blogging framework for hackers</em>), c&#39;est à dire :</p>\n<ul>\n<li>sachant manipuler git et <a href=\"http://github.com\">github</a></li>\n<li>sachant lancer des commandes de build (rake en l&#39;occurence)</li>\n<li>et sachant éditer feuilles de style CSS, fichiers de configuration YAML et bien entendu des fichiers textes au micro-format Markdown</li>\n</ul>\n<!--more-->\n\n<p>Bon, je tiens à vous le dire tout de suite, mieux vaut avoir un système d&#39;exploitation adapté muni d&#39;un Shell de type Bash, Zsh ou autre, sinon il va falloir bidouiller. En effet, Octopress nécessite une version particulière de Ruby qu&#39;il faut gérer grâce à <a href=\"https://github.com/sstephenson/rbenv\">rbenv</a> (qui permet de créer des environnements Ruby cloisonnés) qui n&#39;est simplement pas fait pour tourner sur un OS comme Windows (ca fonctionne peut être avec cygwin). Dans mon cas ça tombe plutôt bien car je suis sous Linux, mais lorsque j&#39;ai voulu faire un essai au boulot (durant ma pause déjeuné bien sûr), j&#39;ai vite abandonné.</p>\n<h3 id=\"pourquoi-octopress-\">Pourquoi Octopress?</h3>\n<p>Mon choix c&#39;est vite porté sur Octopress car la philosophie de l&#39;outils me plaisait bien, notamment pour:</p>\n<ul>\n<li>La bonne intégration avec GitHub et <em>github-pages</em> qui permet de publier des ressources statiques sur Github, et ca tombe bien car Octopress est un générateur de site. Donc pas besoin d&#39;héberger le blog, d&#39;installer de serveur web, etc. tout est dans un dépôt de code GitHub. Bien entendu, comme le contenu n&#39;est pas dynamique, il peut être facilement hébergé par n&#39;importe quel serveur web.</li>\n<li>Le fait d&#39;éditer ses posts au format Markdown. Encore une fois, à force d&#39;écrire des README, de la doc dans mes projets GitHub dans ce micro-format, et bien je m&#39;y suis fait. Et franchement, même s&#39;il est un peu limitatif, je n&#39;ai pas besoin de plus.</li>\n<li>Le théme de base est sympa. Il se customize simplement en éditant les feuilles de style. D&#39;ailleurs, les CSS sont générés grâce depuis le framework <a href=\"http://sass-lang.com\">SASS</a> qui offre des fonctionnalités qui manquent cruellement aux CSS: variables, mixins, héritage, etc. (ceux qui connaissent <a href=\"http://lesscss.org/\">Less</a> ne seront pas dépaysés). Octopress utilise aussi <a href=\"http://compass-style.org/\">Compass</a> qu&#39;il faut plus voir comme une librairie d&#39;utilitaire à SASS qu&#39;une surcouche à la surcouche. Encore une fois je suis en terrain connu, car j&#39;utilise ces deux framework pour un de mes projet perso. </li>\n<li>Pour enrichir le blog, on peut avoir recours à des plugins. Il y en a déjà quelque-uns très sympa, et comme Octopress se base sur <a href=\"http://jekyllrb.com/\">Jekyll</a> (le moteur de génération) on peut bénéficier de ses plugins. Sinon, quelques bribes de HTML/CSS/Javascript devraient suffir dans la plupart des cas.</li>\n<li>Pour finir, le tout est codé en Ruby (Ocotpress, Jekyll, SASS, Compass), langage que je n&#39;ai jamais abordé (j&#39;ai juste passé quelques minutes sur <a href=\"http://rubymonk.com/\">RubyMonk</a>, le super sexy online tutoriel) et ça peut être l&#39;occasion de s&#39;y mettre!</li>\n<li>Le code est versionné de base, avec GIT. Les posts étant des fichiers Markdown avec header, la configuration dans des fichiers YAML, il n&#39;y a pas de base de données, donc l&#39;intégralité du blog: la structure et le contenu sont versionnés avec notre gestionnaire de version préféré ;). </li>\n</ul>\n<p>Donc voilà, je pense que dans quelques posts et tunning, je pourrais vous en dire plus, notamment sur les avantages/inconvénients, encore une fois en toute subjectivité.</p>\n",
				"layout": "post",
				"title": "Et c'est parti avec octopress",
				"author": "@kramp",
				"date": "2012-09-13 22:13",
				"comments": true,
				"categories": [
					"Octopress",
					"Github"
				]
			},
			"fr": {
				"src": "src/posts/2012-09-13-et-cest-parti-avec-octopress-fr.md",
				"dest": "tmp/fr/posts/2012-09-13-et-cest-parti-avec-octopress.html",
				"url": "posts/2012-09-13-et-cest-parti-avec-octopress.html",
				"fullUrl": "http://krampstudio.com/fr/posts/2012-09-13-et-cest-parti-avec-octopress.html",
				"blogName": "Krampstudio",
				"lang": "fr",
				"fileTitle": "2012-09-13-et-cest-parti-avec-octopress",
				"content": "<p>Voilà c&#39;est fait, cela faisait un petit moment que j&#39;avais cette idée en tête, et deux jours d&#39;arrêt maladie (obligé de rester à la maison parce que contagieux) m&#39;ont permis de prendre quelques heures pour configurer et mettre en ligne ce blog, avec le moteur de génération de blog <a href=\"http://octopress.org\">Octopress</a>.\nQuand je dis quelques heures, c&#39;est vraiement le cas. Octopress cible un public de <em>hackers</em> (le slogan étant <em>A blogging framework for hackers</em>), c&#39;est à dire :</p>\n<ul>\n<li>sachant manipuler git et <a href=\"http://github.com\">github</a></li>\n<li>sachant lancer des commandes de build (rake en l&#39;occurence)</li>\n<li>et sachant éditer feuilles de style CSS, fichiers de configuration YAML et bien entendu des fichiers textes au micro-format Markdown</li>\n</ul>\n<!--more-->\n\n<p>Bon, je tiens à vous le dire tout de suite, mieux vaut avoir un système d&#39;exploitation adapté muni d&#39;un Shell de type Bash, Zsh ou autre, sinon il va falloir bidouiller. En effet, Octopress nécessite une version particulière de Ruby qu&#39;il faut gérer grâce à <a href=\"https://github.com/sstephenson/rbenv\">rbenv</a> (qui permet de créer des environnements Ruby cloisonnés) qui n&#39;est simplement pas fait pour tourner sur un OS comme Windows (ca fonctionne peut être avec cygwin). Dans mon cas ça tombe plutôt bien car je suis sous Linux, mais lorsque j&#39;ai voulu faire un essai au boulot (durant ma pause déjeuné bien sûr), j&#39;ai vite abandonné.</p>\n<h3 id=\"pourquoi-octopress-\">Pourquoi Octopress?</h3>\n<p>Mon choix c&#39;est vite porté sur Octopress car la philosophie de l&#39;outils me plaisait bien, notamment pour:</p>\n<ul>\n<li>La bonne intégration avec GitHub et <em>github-pages</em> qui permet de publier des ressources statiques sur Github, et ca tombe bien car Octopress est un générateur de site. Donc pas besoin d&#39;héberger le blog, d&#39;installer de serveur web, etc. tout est dans un dépôt de code GitHub. Bien entendu, comme le contenu n&#39;est pas dynamique, il peut être facilement hébergé par n&#39;importe quel serveur web.</li>\n<li>Le fait d&#39;éditer ses posts au format Markdown. Encore une fois, à force d&#39;écrire des README, de la doc dans mes projets GitHub dans ce micro-format, et bien je m&#39;y suis fait. Et franchement, même s&#39;il est un peu limitatif, je n&#39;ai pas besoin de plus.</li>\n<li>Le théme de base est sympa. Il se customize simplement en éditant les feuilles de style. D&#39;ailleurs, les CSS sont générés grâce depuis le framework <a href=\"http://sass-lang.com\">SASS</a> qui offre des fonctionnalités qui manquent cruellement aux CSS: variables, mixins, héritage, etc. (ceux qui connaissent <a href=\"http://lesscss.org/\">Less</a> ne seront pas dépaysés). Octopress utilise aussi <a href=\"http://compass-style.org/\">Compass</a> qu&#39;il faut plus voir comme une librairie d&#39;utilitaire à SASS qu&#39;une surcouche à la surcouche. Encore une fois je suis en terrain connu, car j&#39;utilise ces deux framework pour un de mes projet perso. </li>\n<li>Pour enrichir le blog, on peut avoir recours à des plugins. Il y en a déjà quelque-uns très sympa, et comme Octopress se base sur <a href=\"http://jekyllrb.com/\">Jekyll</a> (le moteur de génération) on peut bénéficier de ses plugins. Sinon, quelques bribes de HTML/CSS/Javascript devraient suffir dans la plupart des cas.</li>\n<li>Pour finir, le tout est codé en Ruby (Ocotpress, Jekyll, SASS, Compass), langage que je n&#39;ai jamais abordé (j&#39;ai juste passé quelques minutes sur <a href=\"http://rubymonk.com/\">RubyMonk</a>, le super sexy online tutoriel) et ça peut être l&#39;occasion de s&#39;y mettre!</li>\n<li>Le code est versionné de base, avec GIT. Les posts étant des fichiers Markdown avec header, la configuration dans des fichiers YAML, il n&#39;y a pas de base de données, donc l&#39;intégralité du blog: la structure et le contenu sont versionnés avec notre gestionnaire de version préféré ;). </li>\n</ul>\n<p>Donc voilà, je pense que dans quelques posts et tunning, je pourrais vous en dire plus, notamment sur les avantages/inconvénients, encore une fois en toute subjectivité.</p>\n",
				"layout": "post",
				"title": "Et c'est parti avec octopress",
				"author": "@kramp",
				"date": "2012-09-13 22:13",
				"comments": true,
				"categories": [
					"Octopress",
					"Github"
				]
			}
		},
		"Pluginifier vos composants jQuery": {
			"en": {
				"src": "src/posts/2012-11-27-pluginifier-vos-composants-jquery-en.md",
				"dest": "tmp/en/posts/2012-11-27-pluginifier-vos-composants-jquery.html",
				"url": "posts/2012-11-27-pluginifier-vos-composants-jquery.html",
				"fullUrl": "http://krampstudio.com/en/posts/2012-11-27-pluginifier-vos-composants-jquery.html",
				"blogName": "Krampstudio",
				"lang": "en",
				"fileTitle": "2012-11-27-pluginifier-vos-composants-jquery",
				"content": "<p>C&#39;est en développant l&#39;interface d&#39;un de mes projets persos, que je me suis dit: <em>&quot;Ces composants graphiques que tu fait là, pourquoi ne pas en faire de vrais plugins jQuery, et tout et tout!&quot;</em>. C&#39;est alors que tout s&#39;enchaîne: création d&#39;un dépôt sur Github, recherche des outils, j&#39;ai fait un, puis deux, je présente ça devant mes collègues au travail, et pour finir un petit post en <em>&quot;bonnet de forme&quot;</em>...</p>\n<!-- more -->\n\n<p>Le principe est simple: j&#39;utilise HTML, CSS et la librairie jQuery ainsi que son acolyte jQuery-UI pour développer les interfaces graphiques de mes webapps. Au fur et à mesure des développements, je suis passé de <em>tout faire dans le même script</em> (tout imbriqué) à commencer à utiliser les plugins jQuery dans l&#39;application, puis à en faire des projets autonomes.</p>\n<p>Dans ce post, je vais essayer de <em>pluginifier</em> pas à pas, un petit composant utilisé pour supprimer graphiquement un élément de l&#39;interface.</p>\n<h2 id=\"environnement\">Environnement</h2>\n<p>En premier lieu, les requis:</p>\n<ul>\n<li>Un système d&#39;exploitation avec un Shell de type Bash (Dash, Ksh, Zsh devraient faire l&#39;affaire) pour les autres, il faudra trouver une alternative de type Cygwin ou équivalent.</li>\n<li>Disposer des droits root/admin sur ce système.</li>\n<li>Git installé (optionnel) mais ca vous permettra d&#39;aller chercher les exemples sur GitHub.</li>\n<li>Un éditeur de texte.</li>\n</ul>\n<p>Pour réaliser ce post, j&#39;ai utilisé Ubuntu 12.04, Precise Pangolin.</p>\n<h3 id=\"node-js-npm\">Node.js &amp; NPM</h3>\n<blockquote>\n<p>Mais c&#39;est quoi le rapport entre jQuery et Node.js? Là je ne comprend plus rien!</p>\n</blockquote>\n<p>En fait, on a besoin de <a href=\"http://nodejs.org\">node.js</a>, pour installer notre système de build. Il y a pas mal de librairies JavaScript en CLI qui utilisent node.js. De plus le système de paquet de node, <a href=\"http://npmjs.org\">npm</a>  étant plutôt pas mal, va faciliter l&#39;installation des ces librairies. Par ailleurs, quand on développe en Javascript, même pour du développement client, c&#39;est une bonne chose d&#39;avoir node.js installé, car on peut profiter de tout un tas d&#39;outils sympa.</p>\n<p>Pour installer node.js et npm sous Debian/Ubuntu:</p>\n<x-code-prism language='bash' line-numbers='true'>$> sudo aptitude install nodejs npm</x-code-prism><p>Pour les autres, vous pouvez vous reporter au site de <a href=\"http://nodejs.org/download/\">node.js</a></p>\n<h3 id=\"grunt\">Grunt</h3>\n<p><img src=\"../img/posts/images/grunt.png\" alt=\"grunt\" title=\"Grunt\"></p>\n<p>Une fois la commande npm disponible, il va falloir installer <a href=\"http://gruntjs.com\">Grunt</a>, l&#39;outils que nous utiliserons pour automatiser les tâches de build de notre plugin. Nous allons donc l&#39;installer avec npm, en mode <em>global</em> (donc accessible pour tous les utilisateurs), d&#39;où le commutateur <code class='inline'>g</code>. C&#39;est pourquoi il faut l&#39;installer avec les droits root.</p>\n<x-code-prism language='bash' line-numbers='true'>$> sudo npm install -g grunt</x-code-prism><h3 id=\"phantom-js\">Phantom.js</h3>\n<p><img src=\"../img/posts/images/phantomjs.png\" alt=\"phantomjs\" title=\"phantomjs\"></p>\n<p>Le dernier outils a installer sur votre système est <a href=\"http://phantomjs.org\">Phantom.js</a>, qui va nous servir pour simuler un browser durant nos tests. Il est aussi disponible depuis le gestionnaire de paquet sur les distributions récentes:</p>\n<x-code-prism language='bash' line-numbers='true'>$> sudo aptitude install phantomjs</x-code-prism><p>ou en le téléchargeant depuis le <a href=\"http://phantomjs.org/download.html\">site web</a>, dans ce cas, ne pas oublier de le rajouter dans le <code class='inline'>PATH</code>.</p>\n<h2 id=\"les-choses-s-rieuses\">Les choses sérieuses</h2>\n<p>Voici un exemple de code intégré à un script d&#39;une application:</p>\n<p>{% gist 3854836 dynamic-removable-list.js %}</p>\n<p>Cet exemple est utilisé pour créer une liste HTML en fonction du résultat d&#39;une requête Ajax. Chaque item de la liste doit pouvoir être supprimé par la suite. C&#39;est ce point qui nous intéresse, car nous voulons pouvoir appliquer ce composant de suppression à d&#39;autres parties de notre interface graphique. </p>\n<p>Nous allons procéder en suivant ces étapes:</p>\n<ol>\n<li>Trouver un nom au plugin.</li>\n<li>Générer une structure, un archétype pour notre plugin.</li>\n<li>Refactorer notre code au sein d&#39;un plugin.</li>\n<li>Créer une page d&#39;exemple dédié.</li>\n<li>Créer un ensemble de tests unitaires.</li>\n<li>Définir notre séquence de build.</li>\n<li>L&#39;indexer le site des plugin jQuery.</li>\n</ol>\n<h2 id=\"trouver-un-nom-qui-d-chire\">Trouver un nom qui déchire</h2>\n<p>Alors, voici ma <em>bête noire</em> de la programmation: trouver des noms aux variables, classes, projets! Je n&#39;ai pas ce côté inventif qui va permettre de trouver le nom d&#39;animal super cool, donc je reste très terre à terre. Notre plugin s&#39;appellera <em>RemoveableArea</em>! super... :-(. Si quelqu&#39;un à une meilleure idée, je suis preneur.</p>\n<blockquote>\n<p>Ca c&#39;est fait.</p>\n</blockquote>\n<h2 id=\"g-n-rer-la-structure-du-projet\">Générer la structure du projet</h2>\n<p>L&#39;avantage d&#39;utiliser un outil tel que Grunt c&#39;est qu&#39;il fait une part de notre travail, donc quand on est fainéant, on ne peut plus s&#39;en passer. \nGrunt dispose d&#39;une tâche <code class='inline'>init</code> qui permet de générer une structure de projet type en partant d&#39;un template. Et ça tombe bien, il y en a un pour jQuery.</p>\n<p>Dans l&#39;ordre, on va:</p>\n<ol>\n<li>Créer un répertoire pour notre plugin.</li>\n<li>Le versionner avec GIT.</li>\n<li>Générer la structure de base.</li>\n</ol>\n<x-code-prism language='bash' line-numbers='true'>$ mkdir removablearea\n$ cd removablearea\n$ git init\nInitialized empty Git repository in /home/bertrand/dev/workspace/removablearea/.git/\n$ grunt init:jquery\n#answer the questions about the plugin\n#...\nInitialized from template \"jquery\".\nDone, without errors.\n$ git add -A\n$ git commit -m \"Create base plugin\"</x-code-prism><p>Voilà, maintenant, notre structure est générée, le projet est versionné avec GIT, et si vous avez renseigné soigneusement les questions demandées par Grunt, alors un certain nombre de sections sont déjà pré-remplies.</p>\n<p>Normalement, vous devriez avoir l&#39;arborescence suivante:</p>\n<pre>\n.\n├── grunt.js                    //fichier de build\n├── libs                        //librairies externes\n│   ├── jquery\n│   │   └── jquery.js\n│   ├── jquery-loader.js\n│   └── qunit\n│       ├── qunit.css\n│       └── qunit.js\n├── LICENSE-GPL                    //licenses\n├── LICENSE-MIT\n├── package.json                //meta données du projet\n├── README.md                    \n├── removablearea.jquery.json    //meta données du plugin\n├── src                            //sources du plugin\n│   └── removablearea.js\n└── test                        //tests unitaires\n    ├── removablearea.html\n    └── removablearea_test.js\n</pre>\n\n<p>Nous allons modifier un peu cette structure, en y ajoutant un répertoire <span class=\"inline-code\">sample</span> dans lequel nous allons créer des exemples d&#39;utilisation de notre plugin.</p>\n<h2 id=\"pluginification\">Pluginification</h2>\n<p>Dans un premier temps, nous allons créer la structure (au sens du typage en programmation) de notre plugin jQuery, en se basant sur les bonnes pratiques détaillée dans la <a href=\"http://docs.jquery.com/Plugins/Authoring\" title=\"jQuery Plugin AUthoring\">documentation jQuery</a> à ce propos. Nous allons donc utiliser la structure suivante, comme base de notre fichier <span class=\"inline-code\">src/removablearea.js</span>:</p>\n<p>{% gist 3886198 removablearea.js %}</p>\n<p>Tout d&#39;abord, on peut remarquer que le code est englobé dans une closure. Ce pattern s&#39;appelle <em>Immediately-Invoked Function Expression</em> (ou <em>LIFE</em>). Cette pratique permet d&#39;éviter d&#39;exécuter du code dans le scope global. Dans le cas de jQuery, cet usage permet d&#39;utiliser le symbole dollar en étant sûr qu&#39;il vient de jQuery et non d&#39;un autre framework, le <span class=\"inline-code\">$</span> est mappé à l&#39;objet <span class=\"inline-code\">jQuery</span> :</p>\n<x-code-prism language='javascript' line-numbers='true'>(function( $ ) {\n    //your code\n})( jQuery );</x-code-prism><p>Un autre point que l&#39;on peut souligner est ce string utilisé à la ligne 2:</p>\n<x-code-prism language='javascript' line-numbers='true'>    \"use strict\";</x-code-prism><p>La présence de ce string permet de passer le moteur Javascript en mode <em>strict</em>, qui le rend moins tolérant à certaines pratiques du langage. Vous pouvez consulter la <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">documentation Mozilla</a> pour plus de détails sur ce mode.</p>\n<p>Ensuite la partie qui permet de créer le plugin jQuery peut se résumer à cette ligne:</p>\n<x-code-prism language='javascript' line-numbers='true'>    $.fn.removableArea = function( method ) { }</x-code-prism><p>Littéralement, nous ajoutons à l&#39;attribut <code class='inline'>fn</code> de l&#39;objet <code class='inline'>jQuery</code> (ou <code class='inline'>$</code> pour les intimes), la fonction <code class='inline'>removableArea</code> qui prend en paramètre un nom de méthode. C&#39;est grâce à cette ligne que nous pourrons appeler la fonction <code class='inline'>removableArea</code> sur un élément du DOM, comme <code class='inline'>$(&#39;.boo &gt; #far&#39;).removableArea(options);</code>.</p>\n<p>Ensuite le contenu de cette fonction va tout simplement déléguer les appels à l&#39;objet <code class='inline'>RemovableArea</code> définit au préalable, en fonction du contexte d&#39;appel:</p>\n<ul>\n<li><code class='inline'>removableArea</code> est appelé avec un objet en paramètre (les options): <ul>\n<li>On délègue à <code class='inline'>RemovableArea.init(options)</code>.</li>\n</ul>\n</li>\n<li><code class='inline'>removableArea</code> est appelé avec un string en paramètre:<ul>\n<li>Ce string correspond à une méthode de <code class='inline'>RemovableArea</code>, alors on délègue, sauf si ce nom commence par un <em>underscore</em> (genre de méthode privée).</li>\n</ul>\n</li>\n<li><code class='inline'>removableArea</code> est appelé sans paramètre, on lève une erreur.</li>\n</ul>\n<p>Grâce à ce mécanisme de paramètres, nous pouvons appeler des méthodes à partir du même plugin: </p>\n<x-code-prism language='javascript' line-numbers='true'>    var elt = $('#id').removableArea(options);\n    elt.removableArea('destroy');</x-code-prism><h2 id=\"refactoring\">Refactoring</h2>\n<p>Maintenant, que nous avons la structure de notre plugin en place, nous allons y intégrer notre code. Pour cela, il faut se poser les questions suivantes:</p>\n<ul>\n<li>Quelles sont les options demander à l&#39;utilisateur et quelles seront les valeurs par défaut ?</li>\n<li>Comment répartir notre code entre la méthode par défaut (<code class='inline'>RemovableArea.init(options)</code>) et d&#39;autres méthodes ?</li>\n<li>Quels événements déclencher pour aider à l&#39;implémentation du plugin ?</li>\n</ul>\n<h3 id=\"les-options\">Les options</h3>\n<p>Par convention, le paramétrage des plugins se fait en passant un objet contenant les options pour initialiser le plugin. Le code suivant va permettre d&#39;initialiser le composant de notre exemple:</p>\n<x-code-prism language='javascript' line-numbers='true'>$.removableArea({\n    label         : 'Supprimer',\n    img         : '/imgs/delete.png',\n    warning     : 'Voulez-vous supprimer cet élément?',\n    hoverClass     : 'half-opac'\n});</x-code-prism><p>Nous avons donc définis un certain nombre de paramètres, comme l&#39;image du <em>bouton</em> qui s&#39;affichera pour supprimer la zone ou les différents labels. On permet aussi de définir la classe CSS qui s&#39;appliquera sur ce <em>bouton</em> au passage de la souris. </p>\n<h3 id=\"les-param-tres-par-d-faut\">Les paramètres par défaut</h3>\n<p>Une fois le liste des options définies, il faut leur donner des valeurs par défaut. Cela permet d&#39;éviter de redonner toutes les options à chaque utilisation, et permet surtout de mettre en place un comportement par défaut. L&#39;idée est que le plugin fonctionne tout de suite, mais de laisser la possibilité de le modifier plus tard.</p>\n<p>Pour faire cela, nous allons utiliser un méthode de jQuery qui est très utile: <code class='inline'>$.extend</code> qui permet de <em>merger</em> les options passées en paramètres et les options par défaut.</p>\n<p>Nous allons donc définir ces paramètres par défaut dans un attribut de notre objet <code class='inline'>RemovableArea</code>, puis les étendre avec les paramètres passés au plugin:</p>\n<x-code-prism language='javascript' line-numbers='true'>    var RemovableArea = {\n        _opts : {\n            label : 'Supprimer',\n            img : '/imgs/delete.png',\n            warning : 'Voulez-vous supprimer cet élément?',\n            hoverClass : 'half-opac'\n        },\n        _init: function(options){\n            var opts = $.extend(true, {}, RemovableArea._opts, options);\n            //...\n\n        }\n    };</x-code-prism><p>Grâce au résultat de la méthode <code class='inline'>$.extend</code> la variable <code class='inline'>opts</code> contient les options passées par l&#39;utilisateur ou leur valeur par défaut s&#39;ils ont été omis.</p>\n<h3 id=\"le-code-du-plugin\">Le code du plugin</h3>\n<p>Maintenant, que nous avons une structure à notre plugin, la gestion des paramètres et options, il va falloir répartir le code entre la méthode d&#39;initialisation et d&#39;autres méthodes que nous rajoutons en fonction du fonctionnement souhaité. L&#39;approche que je met souvent en place est de tout faire dans un premier temps dans la méthode d&#39;initialisation, puis je refactor au fur et à mesure (le problème est qu&#39;il m&#39;arrive de n&#39;avoir jamais le temps de refactorer...). </p>\n<p>Pour notre exemple, nous allons créer les éléments du DOM dans la méthode d&#39;initialisation et une méthode <code class='inline'>destroy</code> pour supprime tout ce que le plugin a créé. </p>\n<p>{% gist 4114309 removablearea.js %}</p>\n<p>Voilà donc notre plugin créé! On peut aussi noter l&#39;ajout de deux événements : le premier étant déclenché à l&#39;initialisation du plugin et le second lors de la suppression. Le nom des événements est suffixé par <em>removablearea</em>, qui est une manière de les grouper dans des <a href=\"http://docs.jquery.com/Namespaced_Events\">namespaces</a>.</p>\n<h2 id=\"mise-en-oeuvre-cr-er-une-page-d-exemple\">Mise en oeuvre : créer une page d&#39;exemple</h2>\n<p>Bon rien de bien compliqué ici, je créé juste une page HTML basique qui charge jQuery et notre plugin. Le principe est d&#39;avoir un cas d&#39;utilisation classique du plugin.\nPour notre plugin, je créé cette page dans le répertoire <code class='inline'>sample</code> et je la publie avec <a href=\"http://pages.github.com/\">Github-Pages</a> (ce qui est bien pratique). Jetez donc un oeil à cet <a href=\"http://krampstudio.com/jQueryRemovableArea/index.html\">exemple</a> et aux sources <code class='inline'>Ctrl-U</code>.</p>\n<h2 id=\"tester-du-javascript\">Tester du Javascript</h2>\n<blockquote>\n<p>Tester c&#39;est douter :-S</p>\n</blockquote>\n<p>On voit trop rarement des tests mis en place pour le code Javascript, mais pourtant tous les outils dont nous avons besoin sont disponibles (il y a en a même pas mal!). Donc comme pour n&#39;importe quel autre langage, nous allons créer des tests unitaires automatisés pour notre plugin. </p>\n<p><img src=\"../img/posts/images/qunitjs.png\" alt=\"qunit\" title=\"qunit\"></p>\n<p>Parmi les nombreux frameworks existant, mon dévolu c&#39;est posé sur <a href=\"http://www.qunitjs.org\">Qunit</a> car c&#39;est le framework de tests de jQuery d&#39;une part (donc il s&#39;intègre naturellement avec un plugin jQuery) et d&#39;autre part parce qu&#39;il offre toutes les fonctionnalités dont nous avons besoin: tests asynchrones, <em>fixtures</em>, groupes, etc.</p>\n<p>Le test se compose de deux fichiers:</p>\n<ul>\n<li>Un fichier HTML, qui contient:<ul>\n<li>Une structure de base à ne pas modifier</li>\n<li>Un bloc <em>fixtures</em> dont l&#39;identifiant est <code class='inline'>qunit-fixture</code>. C&#39;est dans ce bloc uniquement que nous pouvons inclure nos éléments liés à notre test. Le contenu de ce bloc n&#39;est pas visible et sera rechargé après l&#39;exécution de chaque méthode de test.</li>\n</ul>\n</li>\n<li>Un fichier Javascript qui va contenir notre test.</li>\n</ul>\n<p>Du point de vue de l&#39;API de test, Qunit nous propose:</p>\n<ul>\n<li>D&#39;organiser les tests en modules. Les tests peuvent partager des attributs lorsqu&#39;ils sont groupés en module.</li>\n<li>Un ensemble de fonctions comparables à des assertions, comme <code class='inline'>ok( boolean )</code>, <code class='inline'>equal(expected, compared)</code>, etc.</li>\n<li>Des méthodes pour tester des méthodes asynchrones.</li>\n</ul>\n<p>Testons notre plugin!</p>\n<p>Tout d&#39;abord, nous créons dans les <em>fixtures</em> trois blocs qui vont nous servir comme zones de suppression:</p>\n<x-code-prism language='markup' line-numbers='true'>    &lt;div id=\"qunit-fixture\"&gt;\n        &lt;div&gt;lame test markup&lt;/div&gt;\n        &lt;div&gt;normal test markup&lt;/div&gt;\n        &lt;div&gt;awesome test markup&lt;/div&gt;\n    &lt;/div&gt;</x-code-prism><p>Ensuite, nous définissons un module dans le test. L&#39;ordre d&#39;invocation des méthodes est important, car toutes les méthodes de test définies après la déclaration du module feront parties de ce module. Ce module va aussi se charger d&#39;initialiser l&#39;attribut <code class='inline'>targets</code> que nous faisons pointer sur les zones à supprimer, et nous pourrons utiliser cet attributs dans tous les tests du module.</p>\n<x-code-prism language='javascript' line-numbers='true'>    module('jQuery#removableArea', {\n        setup: function() {\n            this.targets = $('#qunit-fixture').children();\n        }\n    });</x-code-prism><p>Puis nous déclarons une méthode de test classique qui s&#39;assure que le plugin est bien chargé par jQuery:</p>\n<x-code-prism language='javascript' line-numbers='true'>    test('is plugin loaded in jQuery', 1, function(){\n        ok( (typeof $.fn.removableArea === 'function'), \"the plugin should be available from jQuery.fn\");\n    });</x-code-prism><p>Ensuite, un petit test asynchrone qui se déroule en 3 temps:</p>\n<ol>\n<li>Déclaration d&#39;un <code class='inline'>asyncTest</code>.</li>\n<li>Définir le nombre d&#39;assertion attendues via la fonction <code class='inline'>expected</code>.</li>\n<li>Appeler la fonction <code class='inline'>start</code> une fois que le code asynchrone a été exécuté.</li>\n</ol>\n<p>Ce qui donne le test suivant, qui vérifie que le plugin a bien été chargé en écoutant l&#39;événement d&#39;initialisation:</p>\n<x-code-prism language='javascript' line-numbers='true'>    asyncTest(\"does the plugin initialize\", function(){\n\n        expect(this.targets.length);     //we expect 3 assertions, one by target\n\n        this.targets.bind('init.removablearea', function(){\n                strictEqual(1, $('.removable-ctrl', this).length);\n                start();\n            });\n        this.targets.removableArea();\n    });</x-code-prism><p>Pour lancer les tests, il suffit de charger la page HTML. Le résultat est visible depuis celle-ci, comme nous pouvons le voir sur la capture suivante: </p>\n<p><img src=\"../img/posts/images/sc.test-result.png\" alt=\"shot1\" title=\"Capture de la page de résultats tests \"></p>\n<h2 id=\"automatisation\">Automatisation</h2>\n<blockquote>\n<p>Un makefile pour du Javascript ?</p>\n<blockquote>\n<p>C&#39;est un peu l&#39;idée oui!</p>\n</blockquote>\n</blockquote>\n<p>Dans le but d&#39;améliorer la qualité de nos développements et de gagner du temps, nous allons déléguer les tâches suivantes à un outils de build, <a href=\"http://www.gruntjs.org\">Grunt</a> dont nous avons déjà parlé précédemment: </p>\n<ul>\n<li>Minimification des sources.</li>\n<li>Ajout de la bannière de licence.</li>\n<li>Exécution des tests.</li>\n<li>Vérification du code.</li>\n</ul>\n<p>Pour faire tout cela, c&#39;est simple nous utilisons les plugins fournis de base avec Grunt.</p>\n<h3 id=\"g-n-ration-des-sources-finales\">Génération des sources finales</h3>\n<p>Nous allons distribuer notre plugin sous forme minimifié, mais avec tout de même une bannière rappelant les informations essentielles: le copyright, l&#39;auteur et la licence. Ces informations vont être extraites et formatées à partir du fichier de méta-données : <code class='inline'>package.json</code>. Ce fichier est bien sûr formaté en JSON et suit la convention de description de paquet <a href=\"http://www.npmjs.org\">NPM</a> (les paquets node.js). Vous pouvez allez voir la <a href=\"https://npmjs.org/doc/json.html\">spécification</a> pour plus de détails. </p>\n<p>Dans le cas de notre plugin, les méta-données sont les suivantes:</p>\n<p>{% gist 4145261 package.json %} </p>\n<p>Maintenant nous souhaitons avoir en entête de nos sources le commentaire suivant:</p>\n<x-code-prism language='javascript' line-numbers='true'>/**\n * Copyright (c) 2012 Bertrand Chevrier\n * jQueryRemovableArea - v0.1.0 \n * @author Bertrand Chevrier <chevrier.bertrand@gmail.com>\n * @license GPL  <http://www.gnu.org/licenses/gpl-3.0.txt>\n */</x-code-prism><p>Pour cela Grunt nous propose un mécanisme qui va nous permettre de récupérer le contenu du fichier <code class='inline'>package.json</code> et de l&#39;utiliser au sein de notre fichier de build, via un mécanisme de template basique. De plus, Grunt a mis en place le concept de <code class='inline'>banner</code> qui pourra être concaténé avec notre fichier source. </p>\n<p>Voici le fichier de build <code class='inline'>grunt.js</code> qui va minimifier les sources et créer l&#39;entête:</p>\n<x-code-prism language='javascript' line-numbers='true'>    grunt.initConfig({\n        pkg: '<json:package.json>',\n        meta: {\n            banner: '/**\\n'+\n                    ' * Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author.name %>\\n' +\n                    ' * <%= pkg.name %> - v<%= pkg.version %> \\n' +\n                    ' * @author <%= pkg.author.name %> <<%= pkg.author.email %>>\\n' +\n                    ' * @license <%= pkg.licenses[0].type %>  <<%= pkg.licenses[0].url %>>\\n'+\n                    ' */'\n        },\n        min : {\n            dist : {\n                src: 'src/removablearea.js',\n                dest: 'jquery.removablearea.min.js'\n            }\n        },\n        concat : {\n            dist : {\n                src : [ '<banner>', 'jquery.removablearea.min.js'],\n                dest: 'jquery.removablearea.min.js'\n            }\n        }\n    });</x-code-prism><p>La commande :</p>\n<x-code-prism language='bash' line-numbers='true'>$> grunt min concat</x-code-prism><p>va produire notre fichier final <code class='inline'>jquery.removablearea.min.js</code>.</p>\n<h3 id=\"tests-et-v-rification\">Tests et vérification</h3>\n<p>Nous pouvons automatiser l&#39;exécution des tests Qunit avec Grunt et PhantomJs. PhantomJs permet d&#39;exécuter le test dans un navigateur en ligne de commande: il créé un navigateur de type WebKit en <em>headless</em>. </p>\n<p>Pour la vérification du code source, nous utilisons <a href=\"http://www.jshint.com\">JSHint</a> qui est plus flexible que <a href=\"http://www.jslint.com\">JSLint</a>. </p>\n<p>Puisque nous utilisons les plugins fournis par défaut avec Grunt, la configuration se résume à l&#39;ajout d&#39;un pattern pointant sur les fichiers de tests Qunit et la définition des règles JSHint. </p>\n<p>Le fichier de build final ressemble à cela:</p>\n<p>{% gist 4145424 grunt.js %}</p>\n<p>Et voici le genre de sortie que devrait retourner Grunt si tout se passe bien durant le build:</p>\n<x-code-prism language='bash' line-numbers='true'>$> grunt \nRunning \"lint:files\" (lint) task\nLint free.\n\nRunning \"qunit:all\" (qunit) task\nTesting removablearea.html....OK\n>> 6 assertions passed (61ms)\n\nRunning \"min:dist\" (min) task\nFile \"jquery.removablearea.min.js\" created.\nUncompressed size: 2001 bytes.\nCompressed size: 660 bytes gzipped (1269 bytes minified).\n\nRunning \"concat:dist\" (concat) task\nFile \"jquery.removablearea.min.js\" created.\n\nDone, without errors.</x-code-prism><h2 id=\"partager\">Partager</h2>\n<blockquote>\n<p>On va rentrer dans la postérité</p>\n</blockquote>\n<p>Bien que le <a href=\"http://plugins.jquery.com/\">site</a> répertoriant les plugins JQuery soit <em>en cours de développement</em>, il nous donne déjà la procédure à suivre pour y inscrire notre plugin. Dès que le site sera fini, notre plugin devrait théoriquement parti de la liste, un très bon moyen pour le faire connaître et de le partager. </p>\n<h3 id=\"les-m-ta-donn-es\">Les méta-données</h3>\n<p>Tout comme pour le build, nous devons créer un fichier qui va contenir les informations relatives à notre plugin. Ce fichier servira à fournir les informations nécessaires pour indexer le plugin. Ce fichier est très proche du fichier <code class='inline'>package.json</code> (car ils se sont inspirés de la spec NPM), mais trop différent pour n&#39;utiliser qu&#39;un seul fichier... En suivant le <a href=\"https://github.com/jquery/plugins.jquery.com/blob/master/docs/manifest.md\">format spécifié</a>, voici à quoi ressemble ce fichier pour notre plugin:</p>\n<p>{% gist 4156975 removablearea.jquery.json %}</p>\n<p>Bon, c&#39;est un peu redondant avec le fichier <code class='inline'>package.json</code> et il est surement possible de le générer avec depuis celui-ci, d&#39;ailleurs si quelqu&#39;un le fait déjà n&#39;hésitez pas à laisser un commentaire!</p>\n<h3 id=\"pr-parer-l-indexation\">Préparer l&#39;indexation</h3>\n<p>Pour préparer l&#39;indexation sur le site <a href=\"http://plugins.jquery.com\">plugins.jquery.com</a>, il suffit d&#39;ajouter un <em>hook</em> sur notre dépôt Github, comme décrit le décrit cette <a href=\"https://github.com/jquery/plugins.jquery.com#how-to-list-a-plugin\">procédure</a>. La capture suivante montre l&#39;interface d&#39;administration du projet sur Github qui permet de rajouter le hoot:</p>\n<p><img src=\"../img/posts/images/sc.github-hook.png\" alt=\"shot2\" title=\"Ajout d&#39;un service hook dans l&#39;administration du dépôt\"></p>\n<h1 id=\"et-voil-\">Et voilà</h1>\n<blockquote>\n<p>Un petit plugin jQuery aux petits oignons.</p>\n</blockquote>\n<p>Le code source de l&#39;exemple est bien entendu disponible sur mon Github <a href=\"https://github.com/krampstudio/jQueryRemovableArea\">krampstudio/jQueryRemovableArea</a>. </p>\n<p><em>Enjoy javascript coding</em></p>\n",
				"layout": "post",
				"title": "Pluginifier vos composants jQuery",
				"author": "@kramp",
				"date": "2012-11-27 23:02",
				"comments": true,
				"categories": [
					"javascript",
					"jquery",
					"build",
					"test"
				]
			},
			"fr": {
				"src": "src/posts/2012-11-27-pluginifier-vos-composants-jquery-fr.md",
				"dest": "tmp/fr/posts/2012-11-27-pluginifier-vos-composants-jquery.html",
				"url": "posts/2012-11-27-pluginifier-vos-composants-jquery.html",
				"fullUrl": "http://krampstudio.com/fr/posts/2012-11-27-pluginifier-vos-composants-jquery.html",
				"blogName": "Krampstudio",
				"lang": "fr",
				"fileTitle": "2012-11-27-pluginifier-vos-composants-jquery",
				"content": "<p>C&#39;est en développant l&#39;interface d&#39;un de mes projets persos, que je me suis dit: <em>&quot;Ces composants graphiques que tu fait là, pourquoi ne pas en faire de vrais plugins jQuery, et tout et tout!&quot;</em>. C&#39;est alors que tout s&#39;enchaîne: création d&#39;un dépôt sur Github, recherche des outils, j&#39;ai fait un, puis deux, je présente ça devant mes collègues au travail, et pour finir un petit post en <em>&quot;bonnet de forme&quot;</em>...</p>\n<!-- more -->\n\n<p>Le principe est simple: j&#39;utilise HTML, CSS et la librairie jQuery ainsi que son acolyte jQuery-UI pour développer les interfaces graphiques de mes webapps. Au fur et à mesure des développements, je suis passé de <em>tout faire dans le même script</em> (tout imbriqué) à commencer à utiliser les plugins jQuery dans l&#39;application, puis à en faire des projets autonomes.</p>\n<p>Dans ce post, je vais essayer de <em>pluginifier</em> pas à pas, un petit composant utilisé pour supprimer graphiquement un élément de l&#39;interface.</p>\n<h2 id=\"environnement\">Environnement</h2>\n<p>En premier lieu, les requis:</p>\n<ul>\n<li>Un système d&#39;exploitation avec un Shell de type Bash (Dash, Ksh, Zsh devraient faire l&#39;affaire) pour les autres, il faudra trouver une alternative de type Cygwin ou équivalent.</li>\n<li>Disposer des droits root/admin sur ce système.</li>\n<li>Git installé (optionnel) mais ca vous permettra d&#39;aller chercher les exemples sur GitHub.</li>\n<li>Un éditeur de texte.</li>\n</ul>\n<p>Pour réaliser ce post, j&#39;ai utilisé Ubuntu 12.04, Precise Pangolin.</p>\n<h3 id=\"node-js-npm\">Node.js &amp; NPM</h3>\n<blockquote>\n<p>Mais c&#39;est quoi le rapport entre jQuery et Node.js? Là je ne comprend plus rien!</p>\n</blockquote>\n<p>En fait, on a besoin de <a href=\"http://nodejs.org\">node.js</a>, pour installer notre système de build. Il y a pas mal de librairies JavaScript en CLI qui utilisent node.js. De plus le système de paquet de node, <a href=\"http://npmjs.org\">npm</a>  étant plutôt pas mal, va faciliter l&#39;installation des ces librairies. Par ailleurs, quand on développe en Javascript, même pour du développement client, c&#39;est une bonne chose d&#39;avoir node.js installé, car on peut profiter de tout un tas d&#39;outils sympa.</p>\n<p>Pour installer node.js et npm sous Debian/Ubuntu:</p>\n<x-code-prism language='bash' line-numbers='true'>$> sudo aptitude install nodejs npm</x-code-prism><p>Pour les autres, vous pouvez vous reporter au site de <a href=\"http://nodejs.org/download/\">node.js</a></p>\n<h3 id=\"grunt\">Grunt</h3>\n<p><img src=\"../img/posts/images/grunt.png\" alt=\"grunt\" title=\"Grunt\"></p>\n<p>Une fois la commande npm disponible, il va falloir installer <a href=\"http://gruntjs.com\">Grunt</a>, l&#39;outils que nous utiliserons pour automatiser les tâches de build de notre plugin. Nous allons donc l&#39;installer avec npm, en mode <em>global</em> (donc accessible pour tous les utilisateurs), d&#39;où le commutateur <code class='inline'>g</code>. C&#39;est pourquoi il faut l&#39;installer avec les droits root.</p>\n<x-code-prism language='bash' line-numbers='true'>$> sudo npm install -g grunt</x-code-prism><h3 id=\"phantom-js\">Phantom.js</h3>\n<p><img src=\"../img/posts/images/phantomjs.png\" alt=\"phantomjs\" title=\"phantomjs\"></p>\n<p>Le dernier outils a installer sur votre système est <a href=\"http://phantomjs.org\">Phantom.js</a>, qui va nous servir pour simuler un browser durant nos tests. Il est aussi disponible depuis le gestionnaire de paquet sur les distributions récentes:</p>\n<x-code-prism language='bash' line-numbers='true'>$> sudo aptitude install phantomjs</x-code-prism><p>ou en le téléchargeant depuis le <a href=\"http://phantomjs.org/download.html\">site web</a>, dans ce cas, ne pas oublier de le rajouter dans le <code class='inline'>PATH</code>.</p>\n<h2 id=\"les-choses-s-rieuses\">Les choses sérieuses</h2>\n<p>Voici un exemple de code intégré à un script d&#39;une application:</p>\n<p>{% gist 3854836 dynamic-removable-list.js %}</p>\n<p>Cet exemple est utilisé pour créer une liste HTML en fonction du résultat d&#39;une requête Ajax. Chaque item de la liste doit pouvoir être supprimé par la suite. C&#39;est ce point qui nous intéresse, car nous voulons pouvoir appliquer ce composant de suppression à d&#39;autres parties de notre interface graphique. </p>\n<p>Nous allons procéder en suivant ces étapes:</p>\n<ol>\n<li>Trouver un nom au plugin.</li>\n<li>Générer une structure, un archétype pour notre plugin.</li>\n<li>Refactorer notre code au sein d&#39;un plugin.</li>\n<li>Créer une page d&#39;exemple dédié.</li>\n<li>Créer un ensemble de tests unitaires.</li>\n<li>Définir notre séquence de build.</li>\n<li>L&#39;indexer le site des plugin jQuery.</li>\n</ol>\n<h2 id=\"trouver-un-nom-qui-d-chire\">Trouver un nom qui déchire</h2>\n<p>Alors, voici ma <em>bête noire</em> de la programmation: trouver des noms aux variables, classes, projets! Je n&#39;ai pas ce côté inventif qui va permettre de trouver le nom d&#39;animal super cool, donc je reste très terre à terre. Notre plugin s&#39;appellera <em>RemoveableArea</em>! super... :-(. Si quelqu&#39;un à une meilleure idée, je suis preneur.</p>\n<blockquote>\n<p>Ca c&#39;est fait.</p>\n</blockquote>\n<h2 id=\"g-n-rer-la-structure-du-projet\">Générer la structure du projet</h2>\n<p>L&#39;avantage d&#39;utiliser un outil tel que Grunt c&#39;est qu&#39;il fait une part de notre travail, donc quand on est fainéant, on ne peut plus s&#39;en passer. \nGrunt dispose d&#39;une tâche <code class='inline'>init</code> qui permet de générer une structure de projet type en partant d&#39;un template. Et ça tombe bien, il y en a un pour jQuery.</p>\n<p>Dans l&#39;ordre, on va:</p>\n<ol>\n<li>Créer un répertoire pour notre plugin.</li>\n<li>Le versionner avec GIT.</li>\n<li>Générer la structure de base.</li>\n</ol>\n<x-code-prism language='bash' line-numbers='true'>$ mkdir removablearea\n$ cd removablearea\n$ git init\nInitialized empty Git repository in /home/bertrand/dev/workspace/removablearea/.git/\n$ grunt init:jquery\n#answer the questions about the plugin\n#...\nInitialized from template \"jquery\".\nDone, without errors.\n$ git add -A\n$ git commit -m \"Create base plugin\"</x-code-prism><p>Voilà, maintenant, notre structure est générée, le projet est versionné avec GIT, et si vous avez renseigné soigneusement les questions demandées par Grunt, alors un certain nombre de sections sont déjà pré-remplies.</p>\n<p>Normalement, vous devriez avoir l&#39;arborescence suivante:</p>\n<pre>\n.\n├── grunt.js                    //fichier de build\n├── libs                        //librairies externes\n│   ├── jquery\n│   │   └── jquery.js\n│   ├── jquery-loader.js\n│   └── qunit\n│       ├── qunit.css\n│       └── qunit.js\n├── LICENSE-GPL                    //licenses\n├── LICENSE-MIT\n├── package.json                //meta données du projet\n├── README.md                    \n├── removablearea.jquery.json    //meta données du plugin\n├── src                            //sources du plugin\n│   └── removablearea.js\n└── test                        //tests unitaires\n    ├── removablearea.html\n    └── removablearea_test.js\n</pre>\n\n<p>Nous allons modifier un peu cette structure, en y ajoutant un répertoire <span class=\"inline-code\">sample</span> dans lequel nous allons créer des exemples d&#39;utilisation de notre plugin.</p>\n<h2 id=\"pluginification\">Pluginification</h2>\n<p>Dans un premier temps, nous allons créer la structure (au sens du typage en programmation) de notre plugin jQuery, en se basant sur les bonnes pratiques détaillée dans la <a href=\"http://docs.jquery.com/Plugins/Authoring\" title=\"jQuery Plugin AUthoring\">documentation jQuery</a> à ce propos. Nous allons donc utiliser la structure suivante, comme base de notre fichier <span class=\"inline-code\">src/removablearea.js</span>:</p>\n<p>{% gist 3886198 removablearea.js %}</p>\n<p>Tout d&#39;abord, on peut remarquer que le code est englobé dans une closure. Ce pattern s&#39;appelle <em>Immediately-Invoked Function Expression</em> (ou <em>LIFE</em>). Cette pratique permet d&#39;éviter d&#39;exécuter du code dans le scope global. Dans le cas de jQuery, cet usage permet d&#39;utiliser le symbole dollar en étant sûr qu&#39;il vient de jQuery et non d&#39;un autre framework, le <span class=\"inline-code\">$</span> est mappé à l&#39;objet <span class=\"inline-code\">jQuery</span> :</p>\n<x-code-prism language='javascript' line-numbers='true'>(function( $ ) {\n    //your code\n})( jQuery );</x-code-prism><p>Un autre point que l&#39;on peut souligner est ce string utilisé à la ligne 2:</p>\n<x-code-prism language='javascript' line-numbers='true'>    \"use strict\";</x-code-prism><p>La présence de ce string permet de passer le moteur Javascript en mode <em>strict</em>, qui le rend moins tolérant à certaines pratiques du langage. Vous pouvez consulter la <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">documentation Mozilla</a> pour plus de détails sur ce mode.</p>\n<p>Ensuite la partie qui permet de créer le plugin jQuery peut se résumer à cette ligne:</p>\n<x-code-prism language='javascript' line-numbers='true'>    $.fn.removableArea = function( method ) { }</x-code-prism><p>Littéralement, nous ajoutons à l&#39;attribut <code class='inline'>fn</code> de l&#39;objet <code class='inline'>jQuery</code> (ou <code class='inline'>$</code> pour les intimes), la fonction <code class='inline'>removableArea</code> qui prend en paramètre un nom de méthode. C&#39;est grâce à cette ligne que nous pourrons appeler la fonction <code class='inline'>removableArea</code> sur un élément du DOM, comme <code class='inline'>$(&#39;.boo &gt; #far&#39;).removableArea(options);</code>.</p>\n<p>Ensuite le contenu de cette fonction va tout simplement déléguer les appels à l&#39;objet <code class='inline'>RemovableArea</code> définit au préalable, en fonction du contexte d&#39;appel:</p>\n<ul>\n<li><code class='inline'>removableArea</code> est appelé avec un objet en paramètre (les options): <ul>\n<li>On délègue à <code class='inline'>RemovableArea.init(options)</code>.</li>\n</ul>\n</li>\n<li><code class='inline'>removableArea</code> est appelé avec un string en paramètre:<ul>\n<li>Ce string correspond à une méthode de <code class='inline'>RemovableArea</code>, alors on délègue, sauf si ce nom commence par un <em>underscore</em> (genre de méthode privée).</li>\n</ul>\n</li>\n<li><code class='inline'>removableArea</code> est appelé sans paramètre, on lève une erreur.</li>\n</ul>\n<p>Grâce à ce mécanisme de paramètres, nous pouvons appeler des méthodes à partir du même plugin: </p>\n<x-code-prism language='javascript' line-numbers='true'>    var elt = $('#id').removableArea(options);\n    elt.removableArea('destroy');</x-code-prism><h2 id=\"refactoring\">Refactoring</h2>\n<p>Maintenant, que nous avons la structure de notre plugin en place, nous allons y intégrer notre code. Pour cela, il faut se poser les questions suivantes:</p>\n<ul>\n<li>Quelles sont les options demander à l&#39;utilisateur et quelles seront les valeurs par défaut ?</li>\n<li>Comment répartir notre code entre la méthode par défaut (<code class='inline'>RemovableArea.init(options)</code>) et d&#39;autres méthodes ?</li>\n<li>Quels événements déclencher pour aider à l&#39;implémentation du plugin ?</li>\n</ul>\n<h3 id=\"les-options\">Les options</h3>\n<p>Par convention, le paramétrage des plugins se fait en passant un objet contenant les options pour initialiser le plugin. Le code suivant va permettre d&#39;initialiser le composant de notre exemple:</p>\n<x-code-prism language='javascript' line-numbers='true'>$.removableArea({\n    label         : 'Supprimer',\n    img         : '/imgs/delete.png',\n    warning     : 'Voulez-vous supprimer cet élément?',\n    hoverClass     : 'half-opac'\n});</x-code-prism><p>Nous avons donc définis un certain nombre de paramètres, comme l&#39;image du <em>bouton</em> qui s&#39;affichera pour supprimer la zone ou les différents labels. On permet aussi de définir la classe CSS qui s&#39;appliquera sur ce <em>bouton</em> au passage de la souris. </p>\n<h3 id=\"les-param-tres-par-d-faut\">Les paramètres par défaut</h3>\n<p>Une fois le liste des options définies, il faut leur donner des valeurs par défaut. Cela permet d&#39;éviter de redonner toutes les options à chaque utilisation, et permet surtout de mettre en place un comportement par défaut. L&#39;idée est que le plugin fonctionne tout de suite, mais de laisser la possibilité de le modifier plus tard.</p>\n<p>Pour faire cela, nous allons utiliser un méthode de jQuery qui est très utile: <code class='inline'>$.extend</code> qui permet de <em>merger</em> les options passées en paramètres et les options par défaut.</p>\n<p>Nous allons donc définir ces paramètres par défaut dans un attribut de notre objet <code class='inline'>RemovableArea</code>, puis les étendre avec les paramètres passés au plugin:</p>\n<x-code-prism language='javascript' line-numbers='true'>    var RemovableArea = {\n        _opts : {\n            label : 'Supprimer',\n            img : '/imgs/delete.png',\n            warning : 'Voulez-vous supprimer cet élément?',\n            hoverClass : 'half-opac'\n        },\n        _init: function(options){\n            var opts = $.extend(true, {}, RemovableArea._opts, options);\n            //...\n\n        }\n    };</x-code-prism><p>Grâce au résultat de la méthode <code class='inline'>$.extend</code> la variable <code class='inline'>opts</code> contient les options passées par l&#39;utilisateur ou leur valeur par défaut s&#39;ils ont été omis.</p>\n<h3 id=\"le-code-du-plugin\">Le code du plugin</h3>\n<p>Maintenant, que nous avons une structure à notre plugin, la gestion des paramètres et options, il va falloir répartir le code entre la méthode d&#39;initialisation et d&#39;autres méthodes que nous rajoutons en fonction du fonctionnement souhaité. L&#39;approche que je met souvent en place est de tout faire dans un premier temps dans la méthode d&#39;initialisation, puis je refactor au fur et à mesure (le problème est qu&#39;il m&#39;arrive de n&#39;avoir jamais le temps de refactorer...). </p>\n<p>Pour notre exemple, nous allons créer les éléments du DOM dans la méthode d&#39;initialisation et une méthode <code class='inline'>destroy</code> pour supprime tout ce que le plugin a créé. </p>\n<p>{% gist 4114309 removablearea.js %}</p>\n<p>Voilà donc notre plugin créé! On peut aussi noter l&#39;ajout de deux événements : le premier étant déclenché à l&#39;initialisation du plugin et le second lors de la suppression. Le nom des événements est suffixé par <em>removablearea</em>, qui est une manière de les grouper dans des <a href=\"http://docs.jquery.com/Namespaced_Events\">namespaces</a>.</p>\n<h2 id=\"mise-en-oeuvre-cr-er-une-page-d-exemple\">Mise en oeuvre : créer une page d&#39;exemple</h2>\n<p>Bon rien de bien compliqué ici, je créé juste une page HTML basique qui charge jQuery et notre plugin. Le principe est d&#39;avoir un cas d&#39;utilisation classique du plugin.\nPour notre plugin, je créé cette page dans le répertoire <code class='inline'>sample</code> et je la publie avec <a href=\"http://pages.github.com/\">Github-Pages</a> (ce qui est bien pratique). Jetez donc un oeil à cet <a href=\"http://krampstudio.com/jQueryRemovableArea/index.html\">exemple</a> et aux sources <code class='inline'>Ctrl-U</code>.</p>\n<h2 id=\"tester-du-javascript\">Tester du Javascript</h2>\n<blockquote>\n<p>Tester c&#39;est douter :-S</p>\n</blockquote>\n<p>On voit trop rarement des tests mis en place pour le code Javascript, mais pourtant tous les outils dont nous avons besoin sont disponibles (il y a en a même pas mal!). Donc comme pour n&#39;importe quel autre langage, nous allons créer des tests unitaires automatisés pour notre plugin. </p>\n<p><img src=\"../img/posts/images/qunitjs.png\" alt=\"qunit\" title=\"qunit\"></p>\n<p>Parmi les nombreux frameworks existant, mon dévolu c&#39;est posé sur <a href=\"http://www.qunitjs.org\">Qunit</a> car c&#39;est le framework de tests de jQuery d&#39;une part (donc il s&#39;intègre naturellement avec un plugin jQuery) et d&#39;autre part parce qu&#39;il offre toutes les fonctionnalités dont nous avons besoin: tests asynchrones, <em>fixtures</em>, groupes, etc.</p>\n<p>Le test se compose de deux fichiers:</p>\n<ul>\n<li>Un fichier HTML, qui contient:<ul>\n<li>Une structure de base à ne pas modifier</li>\n<li>Un bloc <em>fixtures</em> dont l&#39;identifiant est <code class='inline'>qunit-fixture</code>. C&#39;est dans ce bloc uniquement que nous pouvons inclure nos éléments liés à notre test. Le contenu de ce bloc n&#39;est pas visible et sera rechargé après l&#39;exécution de chaque méthode de test.</li>\n</ul>\n</li>\n<li>Un fichier Javascript qui va contenir notre test.</li>\n</ul>\n<p>Du point de vue de l&#39;API de test, Qunit nous propose:</p>\n<ul>\n<li>D&#39;organiser les tests en modules. Les tests peuvent partager des attributs lorsqu&#39;ils sont groupés en module.</li>\n<li>Un ensemble de fonctions comparables à des assertions, comme <code class='inline'>ok( boolean )</code>, <code class='inline'>equal(expected, compared)</code>, etc.</li>\n<li>Des méthodes pour tester des méthodes asynchrones.</li>\n</ul>\n<p>Testons notre plugin!</p>\n<p>Tout d&#39;abord, nous créons dans les <em>fixtures</em> trois blocs qui vont nous servir comme zones de suppression:</p>\n<x-code-prism language='markup' line-numbers='true'>    &lt;div id=\"qunit-fixture\"&gt;\n        &lt;div&gt;lame test markup&lt;/div&gt;\n        &lt;div&gt;normal test markup&lt;/div&gt;\n        &lt;div&gt;awesome test markup&lt;/div&gt;\n    &lt;/div&gt;</x-code-prism><p>Ensuite, nous définissons un module dans le test. L&#39;ordre d&#39;invocation des méthodes est important, car toutes les méthodes de test définies après la déclaration du module feront parties de ce module. Ce module va aussi se charger d&#39;initialiser l&#39;attribut <code class='inline'>targets</code> que nous faisons pointer sur les zones à supprimer, et nous pourrons utiliser cet attributs dans tous les tests du module.</p>\n<x-code-prism language='javascript' line-numbers='true'>    module('jQuery#removableArea', {\n        setup: function() {\n            this.targets = $('#qunit-fixture').children();\n        }\n    });</x-code-prism><p>Puis nous déclarons une méthode de test classique qui s&#39;assure que le plugin est bien chargé par jQuery:</p>\n<x-code-prism language='javascript' line-numbers='true'>    test('is plugin loaded in jQuery', 1, function(){\n        ok( (typeof $.fn.removableArea === 'function'), \"the plugin should be available from jQuery.fn\");\n    });</x-code-prism><p>Ensuite, un petit test asynchrone qui se déroule en 3 temps:</p>\n<ol>\n<li>Déclaration d&#39;un <code class='inline'>asyncTest</code>.</li>\n<li>Définir le nombre d&#39;assertion attendues via la fonction <code class='inline'>expected</code>.</li>\n<li>Appeler la fonction <code class='inline'>start</code> une fois que le code asynchrone a été exécuté.</li>\n</ol>\n<p>Ce qui donne le test suivant, qui vérifie que le plugin a bien été chargé en écoutant l&#39;événement d&#39;initialisation:</p>\n<x-code-prism language='javascript' line-numbers='true'>    asyncTest(\"does the plugin initialize\", function(){\n\n        expect(this.targets.length);     //we expect 3 assertions, one by target\n\n        this.targets.bind('init.removablearea', function(){\n                strictEqual(1, $('.removable-ctrl', this).length);\n                start();\n            });\n        this.targets.removableArea();\n    });</x-code-prism><p>Pour lancer les tests, il suffit de charger la page HTML. Le résultat est visible depuis celle-ci, comme nous pouvons le voir sur la capture suivante: </p>\n<p><img src=\"../img/posts/images/sc.test-result.png\" alt=\"shot1\" title=\"Capture de la page de résultats tests \"></p>\n<h2 id=\"automatisation\">Automatisation</h2>\n<blockquote>\n<p>Un makefile pour du Javascript ?</p>\n<blockquote>\n<p>C&#39;est un peu l&#39;idée oui!</p>\n</blockquote>\n</blockquote>\n<p>Dans le but d&#39;améliorer la qualité de nos développements et de gagner du temps, nous allons déléguer les tâches suivantes à un outils de build, <a href=\"http://www.gruntjs.org\">Grunt</a> dont nous avons déjà parlé précédemment: </p>\n<ul>\n<li>Minimification des sources.</li>\n<li>Ajout de la bannière de licence.</li>\n<li>Exécution des tests.</li>\n<li>Vérification du code.</li>\n</ul>\n<p>Pour faire tout cela, c&#39;est simple nous utilisons les plugins fournis de base avec Grunt.</p>\n<h3 id=\"g-n-ration-des-sources-finales\">Génération des sources finales</h3>\n<p>Nous allons distribuer notre plugin sous forme minimifié, mais avec tout de même une bannière rappelant les informations essentielles: le copyright, l&#39;auteur et la licence. Ces informations vont être extraites et formatées à partir du fichier de méta-données : <code class='inline'>package.json</code>. Ce fichier est bien sûr formaté en JSON et suit la convention de description de paquet <a href=\"http://www.npmjs.org\">NPM</a> (les paquets node.js). Vous pouvez allez voir la <a href=\"https://npmjs.org/doc/json.html\">spécification</a> pour plus de détails. </p>\n<p>Dans le cas de notre plugin, les méta-données sont les suivantes:</p>\n<p>{% gist 4145261 package.json %} </p>\n<p>Maintenant nous souhaitons avoir en entête de nos sources le commentaire suivant:</p>\n<x-code-prism language='javascript' line-numbers='true'>/**\n * Copyright (c) 2012 Bertrand Chevrier\n * jQueryRemovableArea - v0.1.0 \n * @author Bertrand Chevrier <chevrier.bertrand@gmail.com>\n * @license GPL  <http://www.gnu.org/licenses/gpl-3.0.txt>\n */</x-code-prism><p>Pour cela Grunt nous propose un mécanisme qui va nous permettre de récupérer le contenu du fichier <code class='inline'>package.json</code> et de l&#39;utiliser au sein de notre fichier de build, via un mécanisme de template basique. De plus, Grunt a mis en place le concept de <code class='inline'>banner</code> qui pourra être concaténé avec notre fichier source. </p>\n<p>Voici le fichier de build <code class='inline'>grunt.js</code> qui va minimifier les sources et créer l&#39;entête:</p>\n<x-code-prism language='javascript' line-numbers='true'>    grunt.initConfig({\n        pkg: '<json:package.json>',\n        meta: {\n            banner: '/**\\n'+\n                    ' * Copyright (c) <%= grunt.template.today(\"yyyy\") %> <%= pkg.author.name %>\\n' +\n                    ' * <%= pkg.name %> - v<%= pkg.version %> \\n' +\n                    ' * @author <%= pkg.author.name %> <<%= pkg.author.email %>>\\n' +\n                    ' * @license <%= pkg.licenses[0].type %>  <<%= pkg.licenses[0].url %>>\\n'+\n                    ' */'\n        },\n        min : {\n            dist : {\n                src: 'src/removablearea.js',\n                dest: 'jquery.removablearea.min.js'\n            }\n        },\n        concat : {\n            dist : {\n                src : [ '<banner>', 'jquery.removablearea.min.js'],\n                dest: 'jquery.removablearea.min.js'\n            }\n        }\n    });</x-code-prism><p>La commande :</p>\n<x-code-prism language='bash' line-numbers='true'>$> grunt min concat</x-code-prism><p>va produire notre fichier final <code class='inline'>jquery.removablearea.min.js</code>.</p>\n<h3 id=\"tests-et-v-rification\">Tests et vérification</h3>\n<p>Nous pouvons automatiser l&#39;exécution des tests Qunit avec Grunt et PhantomJs. PhantomJs permet d&#39;exécuter le test dans un navigateur en ligne de commande: il créé un navigateur de type WebKit en <em>headless</em>. </p>\n<p>Pour la vérification du code source, nous utilisons <a href=\"http://www.jshint.com\">JSHint</a> qui est plus flexible que <a href=\"http://www.jslint.com\">JSLint</a>. </p>\n<p>Puisque nous utilisons les plugins fournis par défaut avec Grunt, la configuration se résume à l&#39;ajout d&#39;un pattern pointant sur les fichiers de tests Qunit et la définition des règles JSHint. </p>\n<p>Le fichier de build final ressemble à cela:</p>\n<p>{% gist 4145424 grunt.js %}</p>\n<p>Et voici le genre de sortie que devrait retourner Grunt si tout se passe bien durant le build:</p>\n<x-code-prism language='bash' line-numbers='true'>$> grunt \nRunning \"lint:files\" (lint) task\nLint free.\n\nRunning \"qunit:all\" (qunit) task\nTesting removablearea.html....OK\n>> 6 assertions passed (61ms)\n\nRunning \"min:dist\" (min) task\nFile \"jquery.removablearea.min.js\" created.\nUncompressed size: 2001 bytes.\nCompressed size: 660 bytes gzipped (1269 bytes minified).\n\nRunning \"concat:dist\" (concat) task\nFile \"jquery.removablearea.min.js\" created.\n\nDone, without errors.</x-code-prism><h2 id=\"partager\">Partager</h2>\n<blockquote>\n<p>On va rentrer dans la postérité</p>\n</blockquote>\n<p>Bien que le <a href=\"http://plugins.jquery.com/\">site</a> répertoriant les plugins JQuery soit <em>en cours de développement</em>, il nous donne déjà la procédure à suivre pour y inscrire notre plugin. Dès que le site sera fini, notre plugin devrait théoriquement parti de la liste, un très bon moyen pour le faire connaître et de le partager. </p>\n<h3 id=\"les-m-ta-donn-es\">Les méta-données</h3>\n<p>Tout comme pour le build, nous devons créer un fichier qui va contenir les informations relatives à notre plugin. Ce fichier servira à fournir les informations nécessaires pour indexer le plugin. Ce fichier est très proche du fichier <code class='inline'>package.json</code> (car ils se sont inspirés de la spec NPM), mais trop différent pour n&#39;utiliser qu&#39;un seul fichier... En suivant le <a href=\"https://github.com/jquery/plugins.jquery.com/blob/master/docs/manifest.md\">format spécifié</a>, voici à quoi ressemble ce fichier pour notre plugin:</p>\n<p>{% gist 4156975 removablearea.jquery.json %}</p>\n<p>Bon, c&#39;est un peu redondant avec le fichier <code class='inline'>package.json</code> et il est surement possible de le générer avec depuis celui-ci, d&#39;ailleurs si quelqu&#39;un le fait déjà n&#39;hésitez pas à laisser un commentaire!</p>\n<h3 id=\"pr-parer-l-indexation\">Préparer l&#39;indexation</h3>\n<p>Pour préparer l&#39;indexation sur le site <a href=\"http://plugins.jquery.com\">plugins.jquery.com</a>, il suffit d&#39;ajouter un <em>hook</em> sur notre dépôt Github, comme décrit le décrit cette <a href=\"https://github.com/jquery/plugins.jquery.com#how-to-list-a-plugin\">procédure</a>. La capture suivante montre l&#39;interface d&#39;administration du projet sur Github qui permet de rajouter le hoot:</p>\n<p><img src=\"../img/posts/images/sc.github-hook.png\" alt=\"shot2\" title=\"Ajout d&#39;un service hook dans l&#39;administration du dépôt\"></p>\n<h1 id=\"et-voil-\">Et voilà</h1>\n<blockquote>\n<p>Un petit plugin jQuery aux petits oignons.</p>\n</blockquote>\n<p>Le code source de l&#39;exemple est bien entendu disponible sur mon Github <a href=\"https://github.com/krampstudio/jQueryRemovableArea\">krampstudio/jQueryRemovableArea</a>. </p>\n<p><em>Enjoy javascript coding</em></p>\n",
				"layout": "post",
				"title": "Pluginifier vos composants jQuery",
				"author": "@kramp",
				"date": "2012-11-27 23:02",
				"comments": true,
				"categories": [
					"javascript",
					"jquery",
					"build",
					"test"
				]
			}
		},
		"The Github effect": {
			"en": {
				"src": "src/posts/2013-02-18-github-effect-en.md",
				"dest": "tmp/en/posts/2013-02-18-github-effect.html",
				"url": "posts/2013-02-18-github-effect.html",
				"fullUrl": "http://krampstudio.com/en/posts/2013-02-18-github-effect.html",
				"blogName": "Krampstudio",
				"lang": "en",
				"fileTitle": "2013-02-18-github-effect",
				"content": "<p><img src=\"../img/posts/images/github.png\" alt=\"Github logo\" title=\"Github\"></p>\n<p>I&#39;ve created my <a href=\"https://github.com/krampstudio\">Github account</a> the 5th of November 2010. Ce que je cherchais : seulement un hébergement pour mes dépôts GIT, voire une sorte de Sourforge. J&#39;étais loin de me douter que ce service allait profondément modifier ma façon de développer. Après avoir été initié à GIT en 2008, je souhaitais juste pouvoir <em>backuper</em> mes dépôts locaux et y accéder de partout. Je précise les dates, car à ce moment, je n&#39;avais pas la moindre idée de ce qu&#39;était vraiement Github et de ce qu&#39;il allait devenir.</p>\n<!-- more -->\n\n<p>Effectivement, c&#39;est beaucoup plus tard que je me suis rendu compte de tous les services sous-jacent et notamment du côté <em>social</em> de Github: la facilité déconcertante avec laquelle on peut contribuer à un projet. Pas besoin de s&#39;inscrire à une mailing list, de lire le manuel du contributeur pour soumettre un patch. Avec Github, le <em>fork</em> et le <em>pull request</em>  encouragent grandement à la contribution. Un bug, une fonctionalité manquante à un projet, je fork et je modifie. Je souhaite reverser mes modifications à l&#39;auteur je pull request. L&#39;open source comme on l&#39;avait rêvé. Il y a tout de même un question que je me pose fréquement: certains dépôts n&#39;ont pas de licences, et dans ce cas, bien que le dépôt soit public, a-t-ont le droit de forker, de modifier et donc de redistribuer (je parle des dépôts publics) ? </p>\n<p>Aujourd&#39;hui Github comme plusieurs millions d&#39;utilisateurs et de dépôts! Le tout web utilise Github et bien plus. </p>\n<p>Dans mon cas, Github me sert à</p>\n<ul>\n<li>Avoir un dépôt Git distant</li>\n<li>Gérer la documentation de mes projets (wiki)</li>\n<li>Gérer les tickets (iusses)</li>\n<li>Contribuer à des projets tiers (fork et pull request)</li>\n<li>Repackager sous Github des projets tiers</li>\n<li>Héberger ce présent blog ainsi que les mini-sites de mes projets (GitHub pages)</li>\n<li>Suivre des dépôts et des développeurs</li>\n<li>Utiliser Github comme dépôt de packages </li>\n<li>Notification de services tiers (via les hooks)</li>\n<li>Frounisseur d&#39;authentification sur d&#39;autres sites (via Oauth 2)</li>\n</ul>\n<p>Et je suis sûr que je n&#39;utilise pas tout...</p>\n<p><strong> Dé Re centralier </strong></p>\n<p><img src=\"../img/posts/images/setuptocat.png\" alt=\"Octocat\" title=\"Octocat\"></p>\n<p>J&#39;ai lu des postes de personnes se plaigant des récentes coupures du service. Ma première réaction a été de me demander quel était le problème, de me dire que certaines personnes n&#39;avaient rien compris au mode décentralisé: on peut travailler sur notre dépôt local et pousser dès le service est <em>up</em> à nouveau, au pire on ne peut pas mettre à jour ses <em>issues</em>. C&#39;est le principe d&#39;un outils décentralisé. Mais dernièrement, j&#39;ai commencé à utiliser des services de dépôts de paquets construits autout de Github: <a href=\"http://npmjs.org\">NPM</a> pour les paquets node.js et <a href=\"http://twitter.github.com/bower\">Bower</a> pour les dépendances Javascript clientes. NPM a son propre <a href=\"http://registry.npmjs.org\">serveur de paquet</a>, mais il est possible de faire pointer une dépendance directement sur un dépôt Github. Bower, lui, utilise Github comme source pour télécharger les dépendances, et là dès que Github est en maintenance, impossible d&#39;installer la moindre dépendance. C&#39;est plutôt embarrassant. J&#39;aime beaucoup le principe du serveur de paquets, que j&#39;utilise autant côté système (Debian) ou pour le développement (Maven) et à vrai dire je n&#39;ai jamais eu le moindre soucis, peut être à cause du principe de serveurs mirroirs répartis autour du monde (en tout cas chez Debian). Peut être Github devrait faire la même chose, au moins pour limiter les dégâts en cas d&#39;interruption de service. J&#39;aime beaucoup Github, leurs services, leur société, leur vision, mais maintenant beaucoup de projets de dépendent très fortement d&#39;eux et si un jour ca s&#39;arrête quel seront les impacts? Heureusement qu&#39;il ne s&#39;agit pas de SvnHub ou CvsHub  </p>\n",
				"layout": "post",
				"title": "The Github effect",
				"author": "@kramp",
				"date": "2013-02-18 12:33",
				"comments": true,
				"categories": "git, web"
			}
		},
		"L'effet Github": {
			"fr": {
				"src": "src/posts/2013-02-18-github-effect-fr.md",
				"dest": "tmp/fr/posts/2013-02-18-github-effect.html",
				"url": "posts/2013-02-18-github-effect.html",
				"fullUrl": "http://krampstudio.com/fr/posts/2013-02-18-github-effect.html",
				"blogName": "Krampstudio",
				"lang": "fr",
				"fileTitle": "2013-02-18-github-effect",
				"content": "<p><img src=\"../img/posts/images/github.png\" alt=\"Github logo\" title=\"Github\"></p>\n<p>J&#39;ai créé mon <a href=\"https://github.com/krampstudio\">compte Github</a> le 5 novembre 2010. Ce que je cherchais : seulement un hébergement pour mes dépôts GIT, voire une sorte de Sourforge. J&#39;étais loin de me douter que ce service allait profondément modifier ma façon de développer. Après avoir été initié à GIT en 2008, je souhaitais juste pouvoir <em>backuper</em> mes dépôts locaux et y accéder de partout. Je précise les dates, car à ce moment, je n&#39;avais pas la moindre idée de ce qu&#39;était vraiement Github et de ce qu&#39;il allait devenir.</p>\n<!-- more -->\n\n<p>Effectivement, c&#39;est beaucoup plus tard que je me suis rendu compte de tous les services sous-jacent et notamment du côté <em>social</em> de Github: la facilité déconcertante avec laquelle on peut contribuer à un projet. Pas besoin de s&#39;inscrire à une mailing list, de lire le manuel du contributeur pour soumettre un patch. Avec Github, le <em>fork</em> et le <em>pull request</em>  encouragent grandement à la contribution. Un bug, une fonctionalité manquante à un projet, je fork et je modifie. Je souhaite reverser mes modifications à l&#39;auteur je pull request. L&#39;open source comme on l&#39;avait rêvé. Il y a tout de même un question que je me pose fréquement: certains dépôts n&#39;ont pas de licences, et dans ce cas, bien que le dépôt soit public, a-t-ont le droit de forker, de modifier et donc de redistribuer (je parle des dépôts publics) ? </p>\n<p>Aujourd&#39;hui Github comme plusieurs millions d&#39;utilisateurs et de dépôts! Le tout web utilise Github et bien plus. </p>\n<p>Dans mon cas, Github me sert à</p>\n<ul>\n<li>Avoir un dépôt Git distant</li>\n<li>Gérer la documentation de mes projets (wiki)</li>\n<li>Gérer les tickets (iusses)</li>\n<li>Contribuer à des projets tiers (fork et pull request)</li>\n<li>Repackager sous Github des projets tiers</li>\n<li>Héberger ce présent blog ainsi que les mini-sites de mes projets (GitHub pages)</li>\n<li>Suivre des dépôts et des développeurs</li>\n<li>Utiliser Github comme dépôt de packages </li>\n<li>Notification de services tiers (via les hooks)</li>\n<li>Frounisseur d&#39;authentification sur d&#39;autres sites (via Oauth 2)</li>\n</ul>\n<p>Et je suis sûr que je n&#39;utilise pas tout...</p>\n<p><strong> Dé Re centralier </strong></p>\n<p><img src=\"../img/posts/images/setuptocat.png\" alt=\"Octocat\" title=\"Octocat\"></p>\n<p>J&#39;ai lu des postes de personnes se plaigant des récentes coupures du service. Ma première réaction a été de me demander quel était le problème, de me dire que certaines personnes n&#39;avaient rien compris au mode décentralisé: on peut travailler sur notre dépôt local et pousser dès le service est <em>up</em> à nouveau, au pire on ne peut pas mettre à jour ses <em>issues</em>. C&#39;est le principe d&#39;un outils décentralisé. Mais dernièrement, j&#39;ai commencé à utiliser des services de dépôts de paquets construits autout de Github: <a href=\"http://npmjs.org\">NPM</a> pour les paquets node.js et <a href=\"http://twitter.github.com/bower\">Bower</a> pour les dépendances Javascript clientes. NPM a son propre <a href=\"http://registry.npmjs.org\">serveur de paquet</a>, mais il est possible de faire pointer une dépendance directement sur un dépôt Github. Bower, lui, utilise Github comme source pour télécharger les dépendances, et là dès que Github est en maintenance, impossible d&#39;installer la moindre dépendance. C&#39;est plutôt embarrassant. J&#39;aime beaucoup le principe du serveur de paquets, que j&#39;utilise autant côté système (Debian) ou pour le développement (Maven) et à vrai dire je n&#39;ai jamais eu le moindre soucis, peut être à cause du principe de serveurs mirroirs répartis autour du monde (en tout cas chez Debian). Peut être Github devrait faire la même chose, au moins pour limiter les dégâts en cas d&#39;interruption de service. J&#39;aime beaucoup Github, leurs services, leur société, leur vision, mais maintenant beaucoup de projets de dépendent très fortement d&#39;eux et si un jour ca s&#39;arrête quel seront les impacts? Heureusement qu&#39;il ne s&#39;agit pas de SvnHub ou CvsHub  </p>\n",
				"layout": "post",
				"title": "L'effet Github",
				"author": "@kramp",
				"date": "2013-02-18 12:33",
				"comments": true,
				"categories": "git, web"
			}
		},
		"Petite liste des outils JavaScript": {
			"en": {
				"src": "src/posts/2013-02-26-petite-liste-des-outils-javascript-en.md",
				"dest": "tmp/en/posts/2013-02-26-petite-liste-des-outils-javascript.html",
				"url": "posts/2013-02-26-petite-liste-des-outils-javascript.html",
				"fullUrl": "http://krampstudio.com/en/posts/2013-02-26-petite-liste-des-outils-javascript.html",
				"blogName": "Krampstudio",
				"lang": "en",
				"fileTitle": "2013-02-26-petite-liste-des-outils-javascript",
				"content": "<p>Javascript est devenu un langage à la mode. Une profusion d&#39;outils et de librairies fleurissent chaque jour. Lorsqu&#39;on commence un nouveau développement, plusieurs possibilités s&#39;offrent à nous pour composer notre <em>stack</em> côté client (et je ne parle pas du JavaScript côté serveur). Le but de ce post est de lister un certain nombre d&#39;outils permettant de créer cette pile de librairies. </p>\n<p>Cette liste n&#39;est pas exhaustive, car elle se base tout d&#39;abord sur les outils que j&#39;utilise, ai utilisé ou envie d&#39;utiliser. Le nombre de librairies JavaScript de bonne qualité croit de jour en jour et il est difficile de suivre cette frénésie. Mais j&#39;essaierai de mettre à jour cette liste au fil de l&#39;eau... </p>\n<p><em>N&#39;hésitez pas à m&#39;aider à la compléter.</em></p>\n<!-- more -->\n\n<h2 id=\"-a-name-node-a-node-js\"><a name=\"node\"></a>node.js</h2>\n<p><img src=\"../img/posts/images/tools/nodejs.png\" alt=\"node\" title=\"node.js\"></p>\n<p>Node.js est une implémentation JavaScript côté serveur. Node.js utilise V8, le moteur JavaScript de Chromium/Chrome, et fournit des API de développement réseau basé sur un modèle de programmation événementiel et des I/O non bloquantes. </p>\n<blockquote>\n<p>Mon nouvel amour</p>\n</blockquote>\n<p>Site web : <a href=\"http://nodejs.org\">nodejs.org</a></p>\n<h2 id=\"-a-name-npm-a-npm\"><a name=\"npm\"></a>npm</h2>\n<p><img src=\"../img/posts/images/tools/npm.png\" alt=\"npm\" title=\"npm\"></p>\n<p>Npm (<em>Node Package Manager</em>) est le gestionnaire de paquets pour node.js. </p>\n<p>Même dans le cadre de développement client, avoir node.js sur votre machine vous permettra d&#39;avoir à votre disposition beaucoup d&#39;outils et de librairies distribuée sous forme de module node.js (build, qualité, instrumentation, optimisation, etc.). Grâce à npm, vous pourrez les installer et les mettre à jour très facilement. Par exemple, pour installer l&#39;outils <em>uglify</em> (qui permet notamment de minimiser les fichiers sources), il suffira de faire un petit <code>npm install -g uglify</code>. </p>\n<blockquote>\n<p>On ne peut s&#39;en passer</p>\n</blockquote>\n<p>Site web : <a href=\"https://npmjs.org\">npmjs.org</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-jquery-a-jquery\"><a name=\"jquery\"></a>jQuery</h2>\n<p><img src=\"../img/posts/images/tools/jquery.png\" alt=\"jquery\" title=\"jquery\"></p>\n<p>Est-il encore besoin de présenter jQuery? Au cas où vous sortez d&#39;une longue hibernation, jQuery est le framework Javascript permettant de s&#39;affranchir des différences entre navigateurs. Cette librairie de bas niveau permet notamment de récupérer des éléments du DOM en fonction de requêtes CSS (d&#39;ailleurs cette seule fonctionnalité, extrêmement puissante a été externalisé dans un moteur à part: <a href=\"#sizzle\">Sizzle</a>), de manipuler le DOM et ces événements, de faire des requêtes Ajax. jQuery fournit aussi tout un tas d&#39;outils qui facilite la vie du développeur Javascript. </p>\n<blockquote>\n<p>Cette librairie est légère et largement répandue. Le slogan du projet  &quot;<em>write less do more</em>&quot; reflète bien ce qu&#39;apporte ce framework. Ceux qui ont eu a manipuler le DOM sans ce genre de librairie peuvent évaluer jQuery à sa juste valeur.</p>\n</blockquote>\n<p>Sites web : <a href=\"http://jquery.com\">jquery.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-sizzle-a-sizzle\"><a name=\"sizzle\"></a> Sizzle</h2>\n<p><img src=\"../img/posts/images/tools/sizzle.png\" alt=\"sizzle\" title=\"sizzle\"></p>\n<p>Sizzle est un projet qui a pour but de permettre de sélectionner un nœud du DOM en utilisant les sélecteurs CSS3. Sizzle est le moteur utilisé au sein de jQuery pour la partie sélection. </p>\n<blockquote>\n<p>Sizzle est très utile dès lors que l&#39;on souhaite faire des manipulations complexes (on peut facilement créer ses propres sélecteurs) ainsi que dans le cas où vous n&#39;utilisez que la partie sélection de jQuery, cela vous permettra de n&#39;inclure que l&#39;essentiel notamment dans le cadre du développement d&#39;une librairie.</p>\n</blockquote>\n<p>Site web : <a href=\"http://sizzlejs.com\">sizzlejs.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-jqueryui-a-jquery-ui\"><a name=\"jqueryui\"></a>jQuery UI</h2>\n<p><img src=\"../img/posts/images/tools/jquery-ui.png\" alt=\"jqueryui\" title=\"jquery ui\"></p>\n<p>jQuery UI est, comme son nom l&#39;indique, une surcouche à jQuery dédiée aux composants graphiques. Cette librairie offre quelques composants prêt à l&#39;emploi comme les sliders, les tabulations, date-pickers, etc. ainsi que des éléments plus basique pouvant servir à créer ses propres composants comme les effets, le <em>drag n&#39;drop</em>, la gestion des positions, etc. </p>\n<p>jQuery UI utilise des thèmes pour ses composants, facilement customisables grâce à son éditeur de thème en ligne: le <em>theme roller</em>.</p>\n<blockquote>\n<p>jQuery UI est une librairie de très bonne qualité et dont il faut embrasser la philosophie: utiliser les composants disponibles comme des briques de bases pour votre UI, elle n&#39;a pas vocation a proposer une pléthore de composants de haut niveau comme le fait par exemple ExtJS.</p>\n</blockquote>\n<p>Site web : <a href=\"http://jqueryui.com\">jqueryui.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-qunit-a-qunit\"><a name=\"qunit\"></a>QUnit</h2>\n<p><img src=\"../img/posts/images/tools/qunit.png\" alt=\"qunit\" title=\"qunit\"></p>\n<p>QUnit est un framework de tests unitaires JavaScript orienté client. Bien que développé initialement pour tester les différents projets de la fondation jQuery, c&#39;est un framework de test généraliste facile à utiliser et qui s&#39;adapte bien aux tests de code client. Il propose les fonctionnalités de bases comme les assertions, le regroupement des tests ainsi que des fonctionnalités plus avancées comme les tests asynchrones ou les fixtures (une sorte de mock HTML qui permet de réaliser le test avec des éléments externes du DOM dont le code JavaScript peut dépendre).</p>\n<blockquote>\n<p>QUnit est simple, efficace et rapide à mettre en œuvre. </p>\n</blockquote>\n<p>Site web : <a href=\"http://qunitjs.com\">qunitjs.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-jquerymobile-a-jquery-mobile\"><a name=\"jquerymobile\"></a>jQuery Mobile</h2>\n<p><img src=\"../img/posts/images/tools/jquery-mobile.png\" alt=\"jquery mobile\" title=\"jquery mobile\"></p>\n<p>jQuery Mobile est un framework d&#39;interface graphique orienté mobile. Il propose une solution complète de création d&#39;une interface web adaptée aux appareils mobiles (smartphones et tablettes). Cette librairie ne nécessite que peu de code JavaScript et utilise plutôt une sémantique HTML5 qui permettra de définir les éléments d&#39;interface. </p>\n<blockquote>\n<p>jQuery Mobile est une des solutions mobile pour le web les plus facile à mettre en place. A noter tout de même des difficultés dès lors que l&#39;on souhaite sortir du cadre définit.</p>\n</blockquote>\n<p>Site web : <a href=\"http://jquerymobile.com\">jquerymobile.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"choisir-son-moteur-de-template-javascript\">Choisir son moteur de template Javascript</h2>\n<p>Plutôt que de lister les différents moteurs de template en JavaScript, je vous renvoie vers ce <a href=\"http://garann.github.com/template-chooser/\">site</a> plutôt sympa qui permet de choisir son moteur de <em>gabarits</em> en fonction de critères contextuels.</p>\n<h2 id=\"-a-name-grunt-a-grunt\"><a name=\"grunt\"></a>Grunt</h2>\n<p><img src=\"../img/posts/images/tools/grunt.png\" alt=\"grunt\" title=\"grunt\"></p>\n<p>Grunt se définit comme un <em>task runner</em>, c&#39;est donc un outils de <em>build</em> au sens large qui vous permettra d&#39;automatiser un certain nombre de tâches comme la minimification des fichiers, l&#39;orchestration des tests ou la génération de la documentation. Chaque tâche se présente sous la forme d&#39;un plugin et il est très facile de créer ces propres tâches bien qu&#39;il en existe déjà un nombre important. Grunt est distribué sous la forme de packages <a href=\"#node\">node.js</a>.</p>\n<blockquote>\n<p>Grunt est vraiment un beau projet, bien pensé, bien codé et facile à étendre. C&#39;est l&#39;outils de build que j&#39;utilise sur mes projets. </p>\n<p>&lt;pub&gt;De plus, le <a href=\"https://npmjs.org/package/grunt-jsdoc\">plugin jsdoc</a> est super (et a été assez facile à réaliser car les APIs sont complètes et bien documentées).&lt;/pub&gt;</p>\n</blockquote>\n<p>Site web : <a href=\"http://gruntjs.com\">gruntjs.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-bower-a-bower\"><a name=\"bower\"></a> Bower</h2>\n<p><img src=\"../img/posts/images/tools/bower.png\" alt=\"bower\" title=\"bower\"></p>\n<p>Bower est un outils de gestion de composants et de dépendances orienté navigateur. Les packages sont ni plus ni moins que des projets Github, car Bower se base uniquement sur Github comme dépôt de packages. Cela offre tous les avantages de la plate-forme : fork, clone, etc. et aussi les inconvénients : la qualité de service dépend directement de la disponibilité de Github . Les paquets ou composants ne se limitent pas à Javascript mais peuvent contenir n&#39;importe quel type de ressource web: html, css, etc.</p>\n<p>L&#39;outils est simple à utiliser et résous les problématiques de gestion des librairies côté navigateur. Plus d&#39;excuses pour ne pas mettre à jour une librairie et ses plugins...</p>\n<blockquote>\n<p>A mon sens, Bower manque encore un peu de maturité. Néanmoins, le projet est promis à un bel avenir; à utiliser sans modération! </p>\n</blockquote>\n<p>Site web: <a href=\"http://bower.io\">bower.io</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-yeoman-a-yeoman\"><a name=\"yeoman\"></a>Yeoman</h2>\n<p><img src=\"../img/posts/images/tools/yeoman.png\" alt=\"yeoman\" title=\"yeoman\"></p>\n<p>Yeoman est au Javascript ce que Maven est à Java: c&#39;est un outils de gestion du cycle de vie de l&#39;application. Il se compose de 3 outils différents et complémentaires:</p>\n<ul>\n<li><em>yo</em> un outils de <em>scaffolding</em>, il permet de générer des structures pour de nouvelles applications, de créer de composants pour de nombreux framework, etc.</li>\n<li><a href=\"#bower\">bower</a> qu&#39;il utilise en interne pour la gestion des dépendances</li>\n<li><a href=\"#grunt\">grunt</a> qu&#39;il intègre aussi pour l&#39;automatisation des tâches et le build</li>\n</ul>\n<p>Site web : <a href=\"http://yeoman.io\">yeoman.io</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"jake\">Jake</h2>\n<p>Make, Rake et ... Jake c&#39;est l&#39;autre outils de build, d&#39;automatisation de tâches. Il est axé sur la customisation des tâches pour votre projet, d&#39;ailleurs il faudra mettre la main à la pâte et programmer vos tâches. Cet outils se présente sous la forme d&#39;un module <a href=\"#node\">node.js</a> et s&#39;utilise autant pour un projet node qu&#39;un projet browser.</p>\n<p>Site web: <a href=\"https://github.com/mde/jake\">mde/jake</a></p>\n<p>Licence : Apache version 2.0</p>\n<h2 id=\"-a-name-jslint-a-jslint\"><a name=\"jslint\"></a> JSLint</h2>\n<p><img src=\"../img/posts/images/tools/jslint.png\" alt=\"jslint\" title=\"jslint\"></p>\n<p>JSLint est un analyseur de code statique, c&#39;est un outils qui permet de vérifier la qualité du code source Javascript.  JSLint va vérifier la conformité des sources avec des conventions de codes basée sur de bonnes pratiques de programmation, comme l&#39;obligation de mettre des points virgules à la fin des lignes, l&#39;utilisation de l&#39;opérateur de vérité, la vérification des scopes, des variables globales, etc.\nJSLint est déjà très répandu et il y a sûrement un plugin pour votre éditeur/IDE JavaScript favori ou votre système de build/qualité.</p>\n<blockquote>\n<p>Parfois considéré comme trop strict, JSLint est néanmoins un outils essentiel car il permet de développer en évitant les pièges du JavaScript, et de n&#39;utiliser que <strong>The Good Parts</strong>^(*)</p>\n</blockquote>\n<p><strong>*</strong> <em><u>JavaScript, The Good Parts, Douglas Crockford, O&#39;Reilly, 2008</u></em> est un ouvrage de référence du langage JavaScript, son auteur est aussi le développeur de JSLint. La lecture de ce livre vous permetttra de mieux comprendre l&#39;utilisation de certaines règles JSLint (en plus de faire de vous un dieu du JavaScript).</p>\n<p>Site web : <a href=\"http://jslint.com\">jslint.com</a></p>\n<p>Licence : MIT?_</p>\n<h2 id=\"-a-name-jshint-a-jshint\"><a name=\"jshint\"></a>JSHint</h2>\n<p><img src=\"../img/posts/images/tools/jshint.png\" alt=\"jshint\" title=\"jshint\"></p>\n<p>JSHint est un fork de JSLint avec pour but de rendre ce dernier plus configurable. Il permet d&#39;autoriser certaines pratiques ou d&#39;autres styles de programmation que celui défini par JSLint. \nUne des fonctionnalité intéressante de JSHint sont les profiles, qui adaptent la vérification en fonction du contexte ou du framework utilisé (browser, jQuery, node, etc.)</p>\n<blockquote>\n<p>JSHint est un bon compromis sur un code JavaScript existant et n&#39;ayant pas été développé avec les bonnes pratiques telles que définies par Douglas Crockford.</p>\n</blockquote>\n<p>Site web : <a href=\"http://jshint.com\">jshint.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-jasmine-a-jasmine\"><a name=\"jasmine\"></a>Jasmine</h2>\n<p><img src=\"../img/posts/images/tools/jasmine.png\" alt=\"jasmine\" title=\"jasmine\"></p>\n<p>Jasmine est une librairie de tests intégrant les principes du <em>BDD</em> (<em>Behavior Driven Developement</em>), elle ne dépend d&#39;aucune autre librairies et peut être utilisée aussi bien pour tester un contexte client que serveur (node) et s&#39;intègre avec de nombreuses plates-formes.</p>\n<blockquote>\n<p>Jasmine est un des framework de test de référence en JavaScript.</p>\n</blockquote>\n<p>Site web : <a href=\"http://pivotal.github.io/jasmine/\">pivotal.github.io/jasmine</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"phantom-js\">Phantom.js</h2>\n<p><img src=\"../img/posts/images/tools/phantomjs.png\" alt=\"phantomjs\" title=\"phantomjs\"></p>\n<p>Phantom.js est un des outils qu&#39;il est nécessaire d&#39;installer sur sa machine. Cette libraire est un navigateur WebKit sans interface graphique (<em>headless</em>). Phantom.js permet notamment de faire tourner des tests JavaScript clients depuis un terminal, sur un serveur et surtout de lancer des suites de tests sans dépendre d&#39;un navigateur classique. Phantom.js expose une API et est donc scriptable.</p>\n<blockquote>\n<p>Incontournable si vous utilisez un outils de build.</p>\n</blockquote>\n<p>Site web : <a href=\"http://phantomjs.org/\">phantomjs.org</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"-a-name-karma-a-karma\"><a name=\"karma\"></a>Karma</h2>\n<p><img src=\"../img/posts/images/tools/karma.png\" alt=\"karma\" title=\"karma\"></p>\n<p>Précédemment nommé Testacular, Karma est un utilitaire permettant de faciliter l&#39;exécution des tests en JavaScript. Karma vous permettra de configurer, de piloter et d&#39;intégrer vos suites de tests. Quelques fonctionnalités peuvent vous faciliter la vie comme le contrôle des navigateurs. </p>\n<blockquote>\n<p>Karma est fait pour s&#39;intégrer à votre projet quelque soit les librairies déjà utilisées.</p>\n</blockquote>\n<p>Site web : <a href=\"http://karma-runner.github.io\">karma-runner.github.io</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-modernizr-a-modernizr\"><a name=\"modernizr\"></a>Modernizr</h2>\n<p><img src=\"../img/posts/images/tools/modernizr.png\" alt=\"modernizr\" title=\"modernizr\"></p>\n<p>Modernizr est une librairie de détection de fonctionnalités HTML5 et CSS3. Elle permet de vérifier pour le navigateur courant si une fonctionnalité particulière est présente ou non, car comme nous le savons tous, la détection par type de navigateur est à proscrire. </p>\n<blockquote>\n<p>Cet outils doit être utilisé dès que l&#39;on souhaite faire du HTML5 et/ou CSS3. </p>\n</blockquote>\n<p>Site web : <a href=\"http://modernizr.com/\">modernizr.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-underscore-a-underscore-js\"><a name=\"underscore\"></a>Underscore.js</h2>\n<p><img src=\"../img/posts/images/tools/underscore.png\" alt=\"underscore\" title=\"underscore\"></p>\n<p>Underscore.js est un framework généraliste qui augmente le langage avec un certain nombre d&#39;utilitaires fait pour vous faciliter la vie. Il est difficile de synthétiser son contenu car très hétéroclite, il permet autant de faire du map/reduce sur des collections que de la memoization de fonction ou de la manipulation de strings. Underscore va simplement vous éviter de réécrire pas mal de fonctions qui ne sont pas incluses dans le langage. </p>\n<blockquote>\n<p>Underscore est au _  ce que jQuery est au $</p>\n</blockquote>\n<p>Site web: <a href=\"http://underscorejs.org/\">underscorejs.org</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-requirejs-a-require-js\"><a name=\"requirejs\"></a>Require.js</h2>\n<p><img src=\"../img/posts/images/tools/require-js.png\" alt=\"requirejs\" title=\"requirejs\"></p>\n<p>Require.js est une librairie qui permet de pallier à une lacune du langage JavaScript: la gestion des librairies, des dépendances et des imports. Pour cela, Require.js implémente la spécification <a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">AMD</a> (Asynchronous Module Definition) et est aussi compatible <a href=\"http://www.commonjs.org/\">CommonJs</a>. Grâce à Require.js, vous pouvez définir des <em>modules</em> et importer ces modules depuis d&#39;autres modules. La notion de dépendance entre module est gérée et le chargement peut se faire ne mode synchrone ou asynchrone (le module est chargé au moment où il est importé). </p>\n<blockquote>\n<p>Require.js vous offre un système aussi puissant que ceux présents dans d&#39;autres langages. Il est optimisable, et s&#39;intègre facilement avec de nombreuses librairies.</p>\n</blockquote>\n<p>Site web: <a href=\"http://requirejs.org/\">requirejs.org</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"-a-name-jsdoc-a-jsdoc\"><a name=\"jsdoc\"></a>jsdoc</h2>\n<p>Cette librairie permet de générer une documentation du code source JavaScript à partir des commentaires. JsDoc propose un formalisme des commentaires permettant une unification au sein des sources. La documentation finale prend la forme d&#39;un site internet, qu&#39;il est possible de customiser grâce à des templates.</p>\n<blockquote>\n<p>Bien que souffrant encore de quelques lacunes, cette librairie permet de couvrir bon nombre de pratiques diverses et variées dues à la souplesse du langage. </p>\n</blockquote>\n<p>Site web: <a href=\"http://usejsdoc.org/\">usejsdoc.org</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"-a-name-uglifyjs-a-uglifyjs\"><a name=\"uglifyjs\"></a>UglifyJS</h2>\n<p><img src=\"../img/posts/images/tools/require-js.png\" alt=\"uglifyjs\" title=\"uglifyjs\"></p>\n<p>UglifyJS est une librairie de minimification et de compression de code source JavaScript écrit en JavaScript. Cette librairie est performante et offre des résultats très satisfaisant. Elle se distingue des alternatives car elle offre des APIs de parsing et de manipulation du code source basées sur le pattern <em>AST</em> (Abstract Syntax Tree).</p>\n<blockquote>\n<p>UglifyJS est un choix à considérer sérieusement dans le choix d&#39;un outils de compression des sources.</p>\n</blockquote>\n<p>Site web: <a href=\"http://lisperator.net/uglifyjs/\">lisperator.net/uglifyjs</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"-a-name-a-rapha-l\"><a name=\"\"></a>Raphaël</h2>\n<p><img src=\"../img/posts/images/tools/raphael.png\" alt=\"raphaeljs\" title=\"raphaeljs\"></p>\n<p>Raphaël est une librairie de dessin graphique vectoriel pour le web. Elle utilise soit SVG, soit VML comme technologie de rendu pour être compatible avec un grand nombre de navigateur. Raphaël propose une API généraliste de maniuplation de dessin vectoriel (formes, chemins, couleurs, animations, etc.) et d&#39;intéraction utilisateur. Il existe de nombreux <em>plugins</em> ou projets se basant sur Raphaël pour fournir des services de plus haut niveaux (charts, etc.)</p>\n<blockquote>\n<p>Raphaël est un sérieux conccurent aux canvas et peut être même un remplaçant à Flash... </p>\n</blockquote>\n<p>Site web: <a href=\"http://raphaeljs.com/\">raphaeljs.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-prototype-a-prototype-js\"><a name=\"prototype\"></a>Prototype.js</h2>\n<p><img src=\"../img/posts/images/tools/prototype.png\" alt=\"prototype\" title=\"prototype\"></p>\n<p>Prototype est une des première librairie JavaScript fournissant des services cross-browser de haut niveau tels que la manipulation du DOM ou les requêtes AJAX. </p>\n<blockquote>\n<p>Bien qu&#39;aujourd&#39;hui jQuery ait remplacé Prototype dans bon nombre de projets, il reste néanmoins des points très intéressant qu&#39;il est bon de connaître.</p>\n</blockquote>\n<p>Site web: <a href=\"http://prototypejs.org/\">prototypejs.org</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"script-aculo-us\">Script.aculo.us</h2>\n<p><img src=\"../img/posts/images/tools/scriptaculous.png\" alt=\"scriptaculous\" title=\"scriptaculous\"></p>\n<p>Script.aculo.us est à Prototype ce que jQuery UI est à jQuery: il l&#39;augmente de fonctionnalités dédiées à l&#39;interface graphique: effets, drag n&#39;drop, widgets, etc.</p>\n<blockquote>\n<p>Tout comme Prototype, Script.aculo.us fut en sont temps incontournable</p>\n</blockquote>\n<p>Site web: <a href=\"http://script.aculo.us/\">script.aculo.us</a></p>\n<p>Licence : MIT</p>\n",
				"layout": "post",
				"title": "Petite liste des outils JavaScript",
				"author": "@kramp",
				"date": "2013-02-26 22:30",
				"comments": true,
				"categories": "JavaScript, tools"
			},
			"fr": {
				"src": "src/posts/2013-02-26-petite-liste-des-outils-javascript-fr.md",
				"dest": "tmp/fr/posts/2013-02-26-petite-liste-des-outils-javascript.html",
				"url": "posts/2013-02-26-petite-liste-des-outils-javascript.html",
				"fullUrl": "http://krampstudio.com/fr/posts/2013-02-26-petite-liste-des-outils-javascript.html",
				"blogName": "Krampstudio",
				"lang": "fr",
				"fileTitle": "2013-02-26-petite-liste-des-outils-javascript",
				"content": "<p>Javascript est devenu un langage à la mode. Une profusion d&#39;outils et de librairies fleurissent chaque jour. Lorsqu&#39;on commence un nouveau développement, plusieurs possibilités s&#39;offrent à nous pour composer notre <em>stack</em> côté client (et je ne parle pas du JavaScript côté serveur). Le but de ce post est de lister un certain nombre d&#39;outils permettant de créer cette pile de librairies. </p>\n<p>Cette liste n&#39;est pas exhaustive, car elle se base tout d&#39;abord sur les outils que j&#39;utilise, ai utilisé ou envie d&#39;utiliser. Le nombre de librairies JavaScript de bonne qualité croit de jour en jour et il est difficile de suivre cette frénésie. Mais j&#39;essaierai de mettre à jour cette liste au fil de l&#39;eau... </p>\n<p><em>N&#39;hésitez pas à m&#39;aider à la compléter.</em></p>\n<!-- more -->\n\n<h2 id=\"-a-name-node-a-node-js\"><a name=\"node\"></a>node.js</h2>\n<p><img src=\"../img/posts/images/tools/nodejs.png\" alt=\"node\" title=\"node.js\"></p>\n<p>Node.js est une implémentation JavaScript côté serveur. Node.js utilise V8, le moteur JavaScript de Chromium/Chrome, et fournit des API de développement réseau basé sur un modèle de programmation événementiel et des I/O non bloquantes. </p>\n<blockquote>\n<p>Mon nouvel amour</p>\n</blockquote>\n<p>Site web : <a href=\"http://nodejs.org\">nodejs.org</a></p>\n<h2 id=\"-a-name-npm-a-npm\"><a name=\"npm\"></a>npm</h2>\n<p><img src=\"../img/posts/images/tools/npm.png\" alt=\"npm\" title=\"npm\"></p>\n<p>Npm (<em>Node Package Manager</em>) est le gestionnaire de paquets pour node.js. </p>\n<p>Même dans le cadre de développement client, avoir node.js sur votre machine vous permettra d&#39;avoir à votre disposition beaucoup d&#39;outils et de librairies distribuée sous forme de module node.js (build, qualité, instrumentation, optimisation, etc.). Grâce à npm, vous pourrez les installer et les mettre à jour très facilement. Par exemple, pour installer l&#39;outils <em>uglify</em> (qui permet notamment de minimiser les fichiers sources), il suffira de faire un petit <code>npm install -g uglify</code>. </p>\n<blockquote>\n<p>On ne peut s&#39;en passer</p>\n</blockquote>\n<p>Site web : <a href=\"https://npmjs.org\">npmjs.org</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-jquery-a-jquery\"><a name=\"jquery\"></a>jQuery</h2>\n<p><img src=\"../img/posts/images/tools/jquery.png\" alt=\"jquery\" title=\"jquery\"></p>\n<p>Est-il encore besoin de présenter jQuery? Au cas où vous sortez d&#39;une longue hibernation, jQuery est le framework Javascript permettant de s&#39;affranchir des différences entre navigateurs. Cette librairie de bas niveau permet notamment de récupérer des éléments du DOM en fonction de requêtes CSS (d&#39;ailleurs cette seule fonctionnalité, extrêmement puissante a été externalisé dans un moteur à part: <a href=\"#sizzle\">Sizzle</a>), de manipuler le DOM et ces événements, de faire des requêtes Ajax. jQuery fournit aussi tout un tas d&#39;outils qui facilite la vie du développeur Javascript. </p>\n<blockquote>\n<p>Cette librairie est légère et largement répandue. Le slogan du projet  &quot;<em>write less do more</em>&quot; reflète bien ce qu&#39;apporte ce framework. Ceux qui ont eu a manipuler le DOM sans ce genre de librairie peuvent évaluer jQuery à sa juste valeur.</p>\n</blockquote>\n<p>Sites web : <a href=\"http://jquery.com\">jquery.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-sizzle-a-sizzle\"><a name=\"sizzle\"></a> Sizzle</h2>\n<p><img src=\"../img/posts/images/tools/sizzle.png\" alt=\"sizzle\" title=\"sizzle\"></p>\n<p>Sizzle est un projet qui a pour but de permettre de sélectionner un nœud du DOM en utilisant les sélecteurs CSS3. Sizzle est le moteur utilisé au sein de jQuery pour la partie sélection. </p>\n<blockquote>\n<p>Sizzle est très utile dès lors que l&#39;on souhaite faire des manipulations complexes (on peut facilement créer ses propres sélecteurs) ainsi que dans le cas où vous n&#39;utilisez que la partie sélection de jQuery, cela vous permettra de n&#39;inclure que l&#39;essentiel notamment dans le cadre du développement d&#39;une librairie.</p>\n</blockquote>\n<p>Site web : <a href=\"http://sizzlejs.com\">sizzlejs.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-jqueryui-a-jquery-ui\"><a name=\"jqueryui\"></a>jQuery UI</h2>\n<p><img src=\"../img/posts/images/tools/jquery-ui.png\" alt=\"jqueryui\" title=\"jquery ui\"></p>\n<p>jQuery UI est, comme son nom l&#39;indique, une surcouche à jQuery dédiée aux composants graphiques. Cette librairie offre quelques composants prêt à l&#39;emploi comme les sliders, les tabulations, date-pickers, etc. ainsi que des éléments plus basique pouvant servir à créer ses propres composants comme les effets, le <em>drag n&#39;drop</em>, la gestion des positions, etc. </p>\n<p>jQuery UI utilise des thèmes pour ses composants, facilement customisables grâce à son éditeur de thème en ligne: le <em>theme roller</em>.</p>\n<blockquote>\n<p>jQuery UI est une librairie de très bonne qualité et dont il faut embrasser la philosophie: utiliser les composants disponibles comme des briques de bases pour votre UI, elle n&#39;a pas vocation a proposer une pléthore de composants de haut niveau comme le fait par exemple ExtJS.</p>\n</blockquote>\n<p>Site web : <a href=\"http://jqueryui.com\">jqueryui.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-qunit-a-qunit\"><a name=\"qunit\"></a>QUnit</h2>\n<p><img src=\"../img/posts/images/tools/qunit.png\" alt=\"qunit\" title=\"qunit\"></p>\n<p>QUnit est un framework de tests unitaires JavaScript orienté client. Bien que développé initialement pour tester les différents projets de la fondation jQuery, c&#39;est un framework de test généraliste facile à utiliser et qui s&#39;adapte bien aux tests de code client. Il propose les fonctionnalités de bases comme les assertions, le regroupement des tests ainsi que des fonctionnalités plus avancées comme les tests asynchrones ou les fixtures (une sorte de mock HTML qui permet de réaliser le test avec des éléments externes du DOM dont le code JavaScript peut dépendre).</p>\n<blockquote>\n<p>QUnit est simple, efficace et rapide à mettre en œuvre. </p>\n</blockquote>\n<p>Site web : <a href=\"http://qunitjs.com\">qunitjs.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-jquerymobile-a-jquery-mobile\"><a name=\"jquerymobile\"></a>jQuery Mobile</h2>\n<p><img src=\"../img/posts/images/tools/jquery-mobile.png\" alt=\"jquery mobile\" title=\"jquery mobile\"></p>\n<p>jQuery Mobile est un framework d&#39;interface graphique orienté mobile. Il propose une solution complète de création d&#39;une interface web adaptée aux appareils mobiles (smartphones et tablettes). Cette librairie ne nécessite que peu de code JavaScript et utilise plutôt une sémantique HTML5 qui permettra de définir les éléments d&#39;interface. </p>\n<blockquote>\n<p>jQuery Mobile est une des solutions mobile pour le web les plus facile à mettre en place. A noter tout de même des difficultés dès lors que l&#39;on souhaite sortir du cadre définit.</p>\n</blockquote>\n<p>Site web : <a href=\"http://jquerymobile.com\">jquerymobile.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"choisir-son-moteur-de-template-javascript\">Choisir son moteur de template Javascript</h2>\n<p>Plutôt que de lister les différents moteurs de template en JavaScript, je vous renvoie vers ce <a href=\"http://garann.github.com/template-chooser/\">site</a> plutôt sympa qui permet de choisir son moteur de <em>gabarits</em> en fonction de critères contextuels.</p>\n<h2 id=\"-a-name-grunt-a-grunt\"><a name=\"grunt\"></a>Grunt</h2>\n<p><img src=\"../img/posts/images/tools/grunt.png\" alt=\"grunt\" title=\"grunt\"></p>\n<p>Grunt se définit comme un <em>task runner</em>, c&#39;est donc un outils de <em>build</em> au sens large qui vous permettra d&#39;automatiser un certain nombre de tâches comme la minimification des fichiers, l&#39;orchestration des tests ou la génération de la documentation. Chaque tâche se présente sous la forme d&#39;un plugin et il est très facile de créer ces propres tâches bien qu&#39;il en existe déjà un nombre important. Grunt est distribué sous la forme de packages <a href=\"#node\">node.js</a>.</p>\n<blockquote>\n<p>Grunt est vraiment un beau projet, bien pensé, bien codé et facile à étendre. C&#39;est l&#39;outils de build que j&#39;utilise sur mes projets. </p>\n<p>&lt;pub&gt;De plus, le <a href=\"https://npmjs.org/package/grunt-jsdoc\">plugin jsdoc</a> est super (et a été assez facile à réaliser car les APIs sont complètes et bien documentées).&lt;/pub&gt;</p>\n</blockquote>\n<p>Site web : <a href=\"http://gruntjs.com\">gruntjs.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-bower-a-bower\"><a name=\"bower\"></a> Bower</h2>\n<p><img src=\"../img/posts/images/tools/bower.png\" alt=\"bower\" title=\"bower\"></p>\n<p>Bower est un outils de gestion de composants et de dépendances orienté navigateur. Les packages sont ni plus ni moins que des projets Github, car Bower se base uniquement sur Github comme dépôt de packages. Cela offre tous les avantages de la plate-forme : fork, clone, etc. et aussi les inconvénients : la qualité de service dépend directement de la disponibilité de Github . Les paquets ou composants ne se limitent pas à Javascript mais peuvent contenir n&#39;importe quel type de ressource web: html, css, etc.</p>\n<p>L&#39;outils est simple à utiliser et résous les problématiques de gestion des librairies côté navigateur. Plus d&#39;excuses pour ne pas mettre à jour une librairie et ses plugins...</p>\n<blockquote>\n<p>A mon sens, Bower manque encore un peu de maturité. Néanmoins, le projet est promis à un bel avenir; à utiliser sans modération! </p>\n</blockquote>\n<p>Site web: <a href=\"http://bower.io\">bower.io</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-yeoman-a-yeoman\"><a name=\"yeoman\"></a>Yeoman</h2>\n<p><img src=\"../img/posts/images/tools/yeoman.png\" alt=\"yeoman\" title=\"yeoman\"></p>\n<p>Yeoman est au Javascript ce que Maven est à Java: c&#39;est un outils de gestion du cycle de vie de l&#39;application. Il se compose de 3 outils différents et complémentaires:</p>\n<ul>\n<li><em>yo</em> un outils de <em>scaffolding</em>, il permet de générer des structures pour de nouvelles applications, de créer de composants pour de nombreux framework, etc.</li>\n<li><a href=\"#bower\">bower</a> qu&#39;il utilise en interne pour la gestion des dépendances</li>\n<li><a href=\"#grunt\">grunt</a> qu&#39;il intègre aussi pour l&#39;automatisation des tâches et le build</li>\n</ul>\n<p>Site web : <a href=\"http://yeoman.io\">yeoman.io</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"jake\">Jake</h2>\n<p>Make, Rake et ... Jake c&#39;est l&#39;autre outils de build, d&#39;automatisation de tâches. Il est axé sur la customisation des tâches pour votre projet, d&#39;ailleurs il faudra mettre la main à la pâte et programmer vos tâches. Cet outils se présente sous la forme d&#39;un module <a href=\"#node\">node.js</a> et s&#39;utilise autant pour un projet node qu&#39;un projet browser.</p>\n<p>Site web: <a href=\"https://github.com/mde/jake\">mde/jake</a></p>\n<p>Licence : Apache version 2.0</p>\n<h2 id=\"-a-name-jslint-a-jslint\"><a name=\"jslint\"></a> JSLint</h2>\n<p><img src=\"../img/posts/images/tools/jslint.png\" alt=\"jslint\" title=\"jslint\"></p>\n<p>JSLint est un analyseur de code statique, c&#39;est un outils qui permet de vérifier la qualité du code source Javascript.  JSLint va vérifier la conformité des sources avec des conventions de codes basée sur de bonnes pratiques de programmation, comme l&#39;obligation de mettre des points virgules à la fin des lignes, l&#39;utilisation de l&#39;opérateur de vérité, la vérification des scopes, des variables globales, etc.\nJSLint est déjà très répandu et il y a sûrement un plugin pour votre éditeur/IDE JavaScript favori ou votre système de build/qualité.</p>\n<blockquote>\n<p>Parfois considéré comme trop strict, JSLint est néanmoins un outils essentiel car il permet de développer en évitant les pièges du JavaScript, et de n&#39;utiliser que <strong>The Good Parts</strong>^(*)</p>\n</blockquote>\n<p><strong>*</strong> <em><u>JavaScript, The Good Parts, Douglas Crockford, O&#39;Reilly, 2008</u></em> est un ouvrage de référence du langage JavaScript, son auteur est aussi le développeur de JSLint. La lecture de ce livre vous permetttra de mieux comprendre l&#39;utilisation de certaines règles JSLint (en plus de faire de vous un dieu du JavaScript).</p>\n<p>Site web : <a href=\"http://jslint.com\">jslint.com</a></p>\n<p>Licence : MIT?_</p>\n<h2 id=\"-a-name-jshint-a-jshint\"><a name=\"jshint\"></a>JSHint</h2>\n<p><img src=\"../img/posts/images/tools/jshint.png\" alt=\"jshint\" title=\"jshint\"></p>\n<p>JSHint est un fork de JSLint avec pour but de rendre ce dernier plus configurable. Il permet d&#39;autoriser certaines pratiques ou d&#39;autres styles de programmation que celui défini par JSLint. \nUne des fonctionnalité intéressante de JSHint sont les profiles, qui adaptent la vérification en fonction du contexte ou du framework utilisé (browser, jQuery, node, etc.)</p>\n<blockquote>\n<p>JSHint est un bon compromis sur un code JavaScript existant et n&#39;ayant pas été développé avec les bonnes pratiques telles que définies par Douglas Crockford.</p>\n</blockquote>\n<p>Site web : <a href=\"http://jshint.com\">jshint.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-jasmine-a-jasmine\"><a name=\"jasmine\"></a>Jasmine</h2>\n<p><img src=\"../img/posts/images/tools/jasmine.png\" alt=\"jasmine\" title=\"jasmine\"></p>\n<p>Jasmine est une librairie de tests intégrant les principes du <em>BDD</em> (<em>Behavior Driven Developement</em>), elle ne dépend d&#39;aucune autre librairies et peut être utilisée aussi bien pour tester un contexte client que serveur (node) et s&#39;intègre avec de nombreuses plates-formes.</p>\n<blockquote>\n<p>Jasmine est un des framework de test de référence en JavaScript.</p>\n</blockquote>\n<p>Site web : <a href=\"http://pivotal.github.io/jasmine/\">pivotal.github.io/jasmine</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"phantom-js\">Phantom.js</h2>\n<p><img src=\"../img/posts/images/tools/phantomjs.png\" alt=\"phantomjs\" title=\"phantomjs\"></p>\n<p>Phantom.js est un des outils qu&#39;il est nécessaire d&#39;installer sur sa machine. Cette libraire est un navigateur WebKit sans interface graphique (<em>headless</em>). Phantom.js permet notamment de faire tourner des tests JavaScript clients depuis un terminal, sur un serveur et surtout de lancer des suites de tests sans dépendre d&#39;un navigateur classique. Phantom.js expose une API et est donc scriptable.</p>\n<blockquote>\n<p>Incontournable si vous utilisez un outils de build.</p>\n</blockquote>\n<p>Site web : <a href=\"http://phantomjs.org/\">phantomjs.org</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"-a-name-karma-a-karma\"><a name=\"karma\"></a>Karma</h2>\n<p><img src=\"../img/posts/images/tools/karma.png\" alt=\"karma\" title=\"karma\"></p>\n<p>Précédemment nommé Testacular, Karma est un utilitaire permettant de faciliter l&#39;exécution des tests en JavaScript. Karma vous permettra de configurer, de piloter et d&#39;intégrer vos suites de tests. Quelques fonctionnalités peuvent vous faciliter la vie comme le contrôle des navigateurs. </p>\n<blockquote>\n<p>Karma est fait pour s&#39;intégrer à votre projet quelque soit les librairies déjà utilisées.</p>\n</blockquote>\n<p>Site web : <a href=\"http://karma-runner.github.io\">karma-runner.github.io</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-modernizr-a-modernizr\"><a name=\"modernizr\"></a>Modernizr</h2>\n<p><img src=\"../img/posts/images/tools/modernizr.png\" alt=\"modernizr\" title=\"modernizr\"></p>\n<p>Modernizr est une librairie de détection de fonctionnalités HTML5 et CSS3. Elle permet de vérifier pour le navigateur courant si une fonctionnalité particulière est présente ou non, car comme nous le savons tous, la détection par type de navigateur est à proscrire. </p>\n<blockquote>\n<p>Cet outils doit être utilisé dès que l&#39;on souhaite faire du HTML5 et/ou CSS3. </p>\n</blockquote>\n<p>Site web : <a href=\"http://modernizr.com/\">modernizr.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-underscore-a-underscore-js\"><a name=\"underscore\"></a>Underscore.js</h2>\n<p><img src=\"../img/posts/images/tools/underscore.png\" alt=\"underscore\" title=\"underscore\"></p>\n<p>Underscore.js est un framework généraliste qui augmente le langage avec un certain nombre d&#39;utilitaires fait pour vous faciliter la vie. Il est difficile de synthétiser son contenu car très hétéroclite, il permet autant de faire du map/reduce sur des collections que de la memoization de fonction ou de la manipulation de strings. Underscore va simplement vous éviter de réécrire pas mal de fonctions qui ne sont pas incluses dans le langage. </p>\n<blockquote>\n<p>Underscore est au _  ce que jQuery est au $</p>\n</blockquote>\n<p>Site web: <a href=\"http://underscorejs.org/\">underscorejs.org</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-requirejs-a-require-js\"><a name=\"requirejs\"></a>Require.js</h2>\n<p><img src=\"../img/posts/images/tools/require-js.png\" alt=\"requirejs\" title=\"requirejs\"></p>\n<p>Require.js est une librairie qui permet de pallier à une lacune du langage JavaScript: la gestion des librairies, des dépendances et des imports. Pour cela, Require.js implémente la spécification <a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\">AMD</a> (Asynchronous Module Definition) et est aussi compatible <a href=\"http://www.commonjs.org/\">CommonJs</a>. Grâce à Require.js, vous pouvez définir des <em>modules</em> et importer ces modules depuis d&#39;autres modules. La notion de dépendance entre module est gérée et le chargement peut se faire ne mode synchrone ou asynchrone (le module est chargé au moment où il est importé). </p>\n<blockquote>\n<p>Require.js vous offre un système aussi puissant que ceux présents dans d&#39;autres langages. Il est optimisable, et s&#39;intègre facilement avec de nombreuses librairies.</p>\n</blockquote>\n<p>Site web: <a href=\"http://requirejs.org/\">requirejs.org</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"-a-name-jsdoc-a-jsdoc\"><a name=\"jsdoc\"></a>jsdoc</h2>\n<p>Cette librairie permet de générer une documentation du code source JavaScript à partir des commentaires. JsDoc propose un formalisme des commentaires permettant une unification au sein des sources. La documentation finale prend la forme d&#39;un site internet, qu&#39;il est possible de customiser grâce à des templates.</p>\n<blockquote>\n<p>Bien que souffrant encore de quelques lacunes, cette librairie permet de couvrir bon nombre de pratiques diverses et variées dues à la souplesse du langage. </p>\n</blockquote>\n<p>Site web: <a href=\"http://usejsdoc.org/\">usejsdoc.org</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"-a-name-uglifyjs-a-uglifyjs\"><a name=\"uglifyjs\"></a>UglifyJS</h2>\n<p><img src=\"../img/posts/images/tools/require-js.png\" alt=\"uglifyjs\" title=\"uglifyjs\"></p>\n<p>UglifyJS est une librairie de minimification et de compression de code source JavaScript écrit en JavaScript. Cette librairie est performante et offre des résultats très satisfaisant. Elle se distingue des alternatives car elle offre des APIs de parsing et de manipulation du code source basées sur le pattern <em>AST</em> (Abstract Syntax Tree).</p>\n<blockquote>\n<p>UglifyJS est un choix à considérer sérieusement dans le choix d&#39;un outils de compression des sources.</p>\n</blockquote>\n<p>Site web: <a href=\"http://lisperator.net/uglifyjs/\">lisperator.net/uglifyjs</a></p>\n<p>Licence : BSD</p>\n<h2 id=\"-a-name-a-rapha-l\"><a name=\"\"></a>Raphaël</h2>\n<p><img src=\"../img/posts/images/tools/raphael.png\" alt=\"raphaeljs\" title=\"raphaeljs\"></p>\n<p>Raphaël est une librairie de dessin graphique vectoriel pour le web. Elle utilise soit SVG, soit VML comme technologie de rendu pour être compatible avec un grand nombre de navigateur. Raphaël propose une API généraliste de maniuplation de dessin vectoriel (formes, chemins, couleurs, animations, etc.) et d&#39;intéraction utilisateur. Il existe de nombreux <em>plugins</em> ou projets se basant sur Raphaël pour fournir des services de plus haut niveaux (charts, etc.)</p>\n<blockquote>\n<p>Raphaël est un sérieux conccurent aux canvas et peut être même un remplaçant à Flash... </p>\n</blockquote>\n<p>Site web: <a href=\"http://raphaeljs.com/\">raphaeljs.com</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"-a-name-prototype-a-prototype-js\"><a name=\"prototype\"></a>Prototype.js</h2>\n<p><img src=\"../img/posts/images/tools/prototype.png\" alt=\"prototype\" title=\"prototype\"></p>\n<p>Prototype est une des première librairie JavaScript fournissant des services cross-browser de haut niveau tels que la manipulation du DOM ou les requêtes AJAX. </p>\n<blockquote>\n<p>Bien qu&#39;aujourd&#39;hui jQuery ait remplacé Prototype dans bon nombre de projets, il reste néanmoins des points très intéressant qu&#39;il est bon de connaître.</p>\n</blockquote>\n<p>Site web: <a href=\"http://prototypejs.org/\">prototypejs.org</a></p>\n<p>Licence : MIT</p>\n<h2 id=\"script-aculo-us\">Script.aculo.us</h2>\n<p><img src=\"../img/posts/images/tools/scriptaculous.png\" alt=\"scriptaculous\" title=\"scriptaculous\"></p>\n<p>Script.aculo.us est à Prototype ce que jQuery UI est à jQuery: il l&#39;augmente de fonctionnalités dédiées à l&#39;interface graphique: effets, drag n&#39;drop, widgets, etc.</p>\n<blockquote>\n<p>Tout comme Prototype, Script.aculo.us fut en sont temps incontournable</p>\n</blockquote>\n<p>Site web: <a href=\"http://script.aculo.us/\">script.aculo.us</a></p>\n<p>Licence : MIT</p>\n",
				"layout": "post",
				"title": "Petite liste des outils JavaScript",
				"author": "@kramp",
				"date": "2013-02-26 22:30",
				"comments": true,
				"categories": "JavaScript, tools"
			}
		},
		"JavaScript le mot clé this": {
			"en": {
				"src": "src/posts/2013-08-12-javascript-le-mot-cle-this-en.md",
				"dest": "tmp/en/posts/2013-08-12-javascript-le-mot-cle-this.html",
				"url": "posts/2013-08-12-javascript-le-mot-cle-this.html",
				"fullUrl": "http://krampstudio.com/en/posts/2013-08-12-javascript-le-mot-cle-this.html",
				"blogName": "Krampstudio",
				"lang": "en",
				"fileTitle": "2013-08-12-javascript-le-mot-cle-this",
				"content": "<p><img src=\"../img/posts/images/js-badge.png\" alt=\"JS Logo\" title=\"js.this\"></p>\n<p>Si comme moi vous aviez plutôt l&#39;habitude des langages de programmation orientés objets <em>classiques</em>, vous avez sans doute aussi été surpris (entre autre) de l&#39;utilisation du mot clé <code>this</code> en JavaScript. Il y a quelques temps déjà, l&#39;envie de comprendre cette particularité m&#39;a permis d&#39;appréhender les concepts fondateurs du langage. Au final, en essayant de comprendre l&#39;utilisation de <code>this</code>, ma vision du langage a complètement changé et depuis c&#39;est avec plaisir que je code en JS.\nJe vais donc essayer de retracer ce cheminement, en expliquant quelques principes simples mais tellement important. Ça devrait éviter quelques prises de têtes.</p>\n<p>En fait le mot clé <code>this</code> n&#39;est pas du tout ce que l&#39;on croit. Ce n&#39;est pas une référence vers une instance d&#39;un objet, mais le contexte de la fonction. Pour comprendre cela, il y a quelques concepts du langage qu&#39;il faut explorer :</p>\n<ul>\n<li>le type <code>Function</code> est un objet de première classe (<a href=\"http://en.wikipedia.org/wiki/First-class_function\">First-class function</a>), </li>\n<li>le portée des variables locales est hissée au niveau de la fonction, </li>\n<li>le mot clé <code>new</code> n&#39;est seulement qu&#39;un alias </li>\n</ul>\n<!-- more -->\n\n<p><em>Tous les exemples présentés ont été testés avec <a href=\"http://nodejs.org/\">node.js</a> version 0.10.15. Vous pouvez les reproduire et aller plus en vous amusant avec <a href=\"http://nodejs.org/api/repl.html\">REPL</a> (la console node).</em> </p>\n<h2 id=\"la-fonction-citoyenne-de-1-re-classe\">La fonction, citoyenne de 1ère classe</h2>\n<p><a name='function-first-class-object'></a></p>\n<p>On dit du type <code>Function</code> que c&#39;est un objet de première classe car ce type permet de faire tout ce qu&#39;un objet peut faire dans le langage. En gros l&#39;instance d&#39;une fonction se comporte comme un objet. Voici quelques caractéristiques qui illustre ce principe:</p>\n<ul>\n<li>Chaque fonction est une instance du type <code>Object</code>. Bien que <code>typeof aFunction</code> renvoie <code>function</code>, <code>insanteof</code> nous permet de vérifier l&#39;affiliation de la fonction au type <code>Object</code>.</li>\n</ul>\n<x-code-prism language='javascript' line-numbers='true'>function test() {\n    //do stuffs\n};\nconsole.log(test instanceof Object);\n//stdout: true\n\nconsole.log(require('util').inspect(test, true));\n//stdout: { [Function: test]\n//stdout:   [length]: 0,\n//stdout:   [name]: 'test',\n//stdout:   [arguments]: null,\n//stdout:   [caller]: null,\n//stdout:   [prototype]: { [constructor]: [Circular] } }</x-code-prism><ul>\n<li>Une fonction peut être assignée à une variable, comme un objet ou n&#39;importe quel type. </li>\n</ul>\n<x-code-prism language='javascript' line-numbers='true'>var getOs = function get_os() {\n    return 'windows';\n}\nconsole.log( typeof getOs ); \n//stdout: 'function'</x-code-prism><ul>\n<li>une fonction peut être passée en paramètre d&#39;une fonction, permettant ainsi d&#39;utiliser (en autre) le pattern du <code>callback</code>, très utile pour la programmation événementielle et les traitements asynchrones. </li>\n</ul>\n<x-code-prism language='javascript' line-numbers='true'>function os_scanner( getOs ) {\n\n    console.log( typeof arguments[0] );\n\n    if( getOs() == 'windows' ){\n        console.log( 'Oh crap' );\n    } else {\n        console.log( \"I know that, it's a Unix\" );\n    }\n}\n\nos_scanner(getOs);\n//stdout: 'function'\n//stdout: 'Oh Crap'</x-code-prism><ul>\n<li>Une fonction étant une instance, c&#39;est une structure de données. Elle contient des propriétés intrinsèques (<code>name</code>, <code>arguments</code>, etc.), mais on peut aussi lui assigner de nouvelles propriétés.</li>\n</ul>\n<x-code-prism language='javascript' line-numbers='true'>get_os.arch='x86';\n\nconsole.log(require('util').inspect(get_os, true));\n//stdout: { [Function: get_os]\n//stdout:   [length]: 0,\n//stdout:   [name]: 'get_os',\n//stdout:   [arguments]: null,\n//stdout:   [caller]: null,\n//stdout:   [prototype]: { [constructor]: [Circular] },\n//stdout:   arch: 'x86' }</x-code-prism><p>Maintenant, nous savons que la fonction est un des concepts central du langage JavaScript, vous me direz, pas étonnant pour un langage fonctionnel, un peu plus pour un langage orienté objet (même sans classe, mais ça c&#39;est une autre histoire).</p>\n<h2 id=\"scope\">Scope</h2>\n<p>Encore une fois, le langage se distingue de beaucoup de ses confrères sur le point du scope. La portée des variables en JavaScript se propage au niveau de la fonction et non du bloc. Bien entendu les variables globales sont accessibles partout (de tout façon personne n&#39;utilise jamais de variables globales, n&#39;est-ce pas?), par contre les variables <em>locales</em> sont locales à la fonction dans la laquelle elles ont été déclarées. </p>\n<p>Quand on tente d&#39;accéder à une variable non définie, on a une jolie erreur:</p>\n<x-code-prism language='javascript' line-numbers='true'>function get_os(){\n    var arch = 'x86';\n}\n\nfunction get_arch(){\n    console.log(arch);\n}\n\nget_arch();\n//stdout: ReferenceError: arch is not defined\n//stdout:    at get_arch (repl:1:34)\n//stdout:    at [...]</x-code-prism><p>Dans un langage où la portée des variables est le bloc, on pourrait s&#39;attendre à la même chose, mais:</p>\n<x-code-prism language='javascript' line-numbers='true'>function get_arch(){\n    if(false){\n        var arch = 'windows';\n    }\n    console.log(arch);\n}\n\nget_arch();\n//stdout: undefined</x-code-prism><p>La variable <code>arch</code> est donc <strong>accessible</strong> à toute la fonction, même si elle n&#39;a pas encore été définie (d&#39;où le <code>undefined</code>). Ce code est équivalent à:</p>\n<x-code-prism language='javascript' line-numbers='true'>function get_arch(){\n    var arch;\n    if(false){\n        arch = 'windows';\n    }\n    console.log(arch);\n}\n\nget_arch();\n//stdout: undefined</x-code-prism><p>JavaScript intègre le principe du <em>hoisting</em>, c&#39;est-à-dire que toutes les variables locales à une fonction sont accessibles dès le début de celle-ci. Une des bonnes pratiques veut que toutes les variables utilisées soient déclarées en début de fonction. </p>\n<p>Ce type de comportement peut nous paraître limitant. Ce serait la cas si JS n&#39;avais pas un mécanisme de <em>closure</em>. La closure est un principe tout simple mais très puissant, qui donne accès aux variables des scopes englobant dans le scope englobé. Comme la portée du scope est la fonction, alors on peut dire que si une fonction en contient une autre, alors la fonction contenue a accès aux variables de la fonction contenante. Comme souvent en informatique (et avec ma prose) un principe peut être simple mais compliqué à expliquer, alors un bon exemple devrait éclaircir ce point:</p>\n<x-code-prism language='javascript' line-numbers='true'>function desc_os(){\n    var os = 'GNU/Linux';\n    var version = '3.5.0-37-generic';\n    var arch = 'x86_64';\n    var distrib = 'Ubuntu';\n\n    function format(){\n        return os + ' ' + version + ' ' + arch + ' ' + distrib;\n    }\n\n    return format();\n}\n\nconsole.log(desc_os());\n//stdout: GNU/Linux 3.5.0-37-generic x86_64 Ubuntu</x-code-prism><p>Dans l&#39;exemple ci-dessus, la fonction <code>format</code> <em>capture</em> les valeurs des variables de la fonction <code>desc_os</code> au moment de son appel.</p>\n<h2 id=\"le-contexte-de-la-fonction-this-\">Le contexte de la fonction: <code>this</code></h2>\n<p><img src=\"../img/posts/images/this.png\" alt=\"This\" title=\"Source theburnsider dot com slash stop this\"></p>\n<p>Comme nous l&#39;avons vus dans la <a href=\"#function-first-class-object\">première section</a> chaque fonction est aussi un objet. De plus, chaque fonction <em>hérite</em> de plusieurs membres de manière systématiques. </p>\n<p>Les propriétés suivantes sont accessible à partir de chaque fonction  : </p>\n<ul>\n<li><code>name</code> : le nom de la fonction.</li>\n<li><code>length</code> : le nombre d&#39;arguments déclarés.</li>\n<li><code>arguments</code> : un objet qui contient la liste des arguments passés (attention, ce n&#39;est pas un <code>Array</code> mais un objet qui se comporte comme tel).</li>\n<li><code>caller</code> : contient une référence à la fonction appelante.</li>\n</ul>\n<x-code-prism language='javascript' line-numbers='true'>function showFileSystem(mountPoint){\n    console.log(showFileSystem.name);\n    console.log(showFileSystem.length);\n    console.log(showFileSystem.arguments[0]); //also available as the `arguments` variable\n    console.log(showFileSystem.caller.name);\n}\nfunction discCheck(){\n    showFileSystem('/dev/sda');\n}\n\ndiscCheck();\n\n//stdout: showFileSystem\n//stdout: 1\n//stdout: /dev/sda\n//stdout: discCheck</x-code-prism><p>Il existe d&#39;autre propriétés qui peuvent changer entre les implémentions ou dont l&#39;usage sort du scope de ce post (à moins d&#39;une closure... bon, d&#39;accord c&#39;est nul ;).</p>\n<p>Parmi les méthodes accessibles, les suivantes nous intéressent particulièrement:</p>\n<ul>\n<li><code>call</code> : permet d&#39;exécuter la fonction</li>\n<li><code>apply</code> : permet aussi d&#39;exécuter la fonction </li>\n<li><code>bind</code> : créé une nouvelle fonction associée à un nouveau contexte </li>\n</ul>\n<p><code>call</code> et <code>apply</code> ont la même finalité, seul la manière dont les paramètres sont passés changent. On pourrait penser que ces fonctions sont peu utiles, comme dans l&#39;exemple suivant:</p>\n<x-code-prism language='javascript' line-numbers='true'>function kill(pid, signal){\n    if(!signal){\n        signal = '9';\n    }\n    console.log('Running: kill -'+ signal  +  ' ' + pid);\n}\n\n//usual way to invoke function\nkill(1234, 'TERM');\n\n//invoke the function using it's own method call\nkill.call(null, 1234);\n\n//invoke the function using it's own method apply\nkill.apply(null, [1234, 'PIPE']);\n\n//stdout: Running: kill -TERM 1234\n//stdout: Running: kill -9 1234\n//stdout: Running: kill -PIPE 1234</x-code-prism><p>Dans ce cas, il n&#39;y a effectivement pas un très grand intérêt, les méthodes <code>call</code> et <code>apply</code> semblent identiques. La méthode <code>apply</code> a pour particularité d&#39;utiliser un tableau pour les paramètres ce qui facilite les exécutions dynamiques de fonction, par exemple :</p>\n<x-code-prism language='javascript' line-numbers='true'>var fs = require('fs');\n\n//returns an array of files name for a service\nfunction get_logs(service){\n    var logDir = '/var/log/' + service + '/';\n    var logFiles = fs.readdirSync(logDir);\n    if(logFiles && logFiles instanceof Array){\n        return logFiles;\n    }\n    return [];\n}\n\n//merge the content of the array of files\nfunction merge(files){\n    var merged = '';\n    for(var i in files){\n        merged += fs.readSync(files[i]);\n    }\n    console.log(files.length +' files merged'); \n}\n\n//backup each of the files\nfunction backup(files){\n    for(var i in files){\n        fs.createReadStream(files[i]).pipe(fs.createWriteStream(files[i] + '.backup'));\n    }\n    console.log(files.length +' files backed up'); \n}\n\n//do actions on logs of a service\nfunction doOnLogs(service, action){\n    //action is a callback, on which we apply arguments dynamically\n    if(typeof action === 'function'){\n        action.apply(null, get_logs(service));\n    }\n}\n\nconsole.log(get_logs('redis'));\n\n//stdout: ['redis-server.log', redis-server.1.log']\n\n\ndoOnLogs('redis', merge);\ndoOnLogs('redis', backup);\n\n//stdout: 2 files merged\n//stdout: 2 files backed up</x-code-prism><p>C&#39;est bon, j&#39;arrête de vous tenir en haleine, maintenant je vais vous parlez du premier paramètre de ces méthodes, car vous vous demandez quel est donc ce paramètre qui a la valeur <code>null</code>? Et bien ce paramètre c&#39;est <em>le contexte de la fonction</em>, il permet de définir la valeur du mot clé <code>this</code> au sein de la fonction.</p>\n<x-code-prism language='javascript' line-numbers='true'>var cpu = {\n    cores : 2,\n    vendor : 'Intel',\n    ghz : 2.13,\n    model : 'Intel(R) Core(TM)2 Duo CPU P7450 @ 2.13GHz',\n\n    isMultiCore : function(){\n        return this.cores > 1;\n    }\n};\n\nconsole.log(cpu.isMulticore());\n//stdout: true\n\nvar old_cpu = {\n    cores : 1\n};\n\ncpu.isMulticore.call(old_cpu);\n//stdout: false</x-code-prism><p>Dans l&#39;exemple ci-dessus, nous avons modifié le contexte de la fonction. Lors d&#39;un appel de méthode avec l&#39;opérateur <code>.</code> classique, le contexte de fonction est celui de l&#39;objet, donc dans <code>cpu.isMultiCore()</code>, <code>this</code> se rapporte à l&#39;objet <code>cpu</code>. Dans le 2nd appel, nous utilisons la méthode <code>call</code> pour changer le contexte de la fonction: <code>this</code> fera référence à <code>old_cpu</code>.</p>\n<p>Jusqu&#39;ici tout va bien. On a tous compris (enfin j&#39;espère) que <code>this</code> ne se rapporte pas à une instance comme dans d&#39;autres langages mais bien au contexte. Corsons un peu les choses, avec le code suivant:</p>\n<x-code-prism language='javascript' line-numbers='true'>var cpu = {\n    temperature : 65,\n\n    monitorTemperature : function(){\n        var monitor = setInterval(function(){\n            var temp = this.temperatue;\n            if(temp > 180){\n                console.log(\"Fire, fire, please help\"); \n            } else {\n                console.log(\"Temperature at \"+ temp + \"° is ok\");\n            }\n        }, 1000);\n\n        setTimeout(function(){\n            clearInterval(monitor);\n        }, 5000);\n    }\n}\ncpu.monitorTemperature();\n//stdout: Temperature at undefined° is ok\n//stdout: Temperature at undefined° is ok\n//stdout: Temperature at undefined° is ok\n//stdout: Temperature at undefined° is ok</x-code-prism><p>Oh!(Ndt: traduction de  <em>WTF!</em>) C&#39;est quoi ce vieux <code>undefined</code>? Et bien oui, si vous avez suivis, chaque fonction a un contexte et ce contexte est accessible via le mot clé <code>this</code>. De plus, comme le scope porte sur la fonction et que nous déclarons une fonction anonyme comme <em>callback</em> de <code>setInterval</code> et bien <code>this</code> ne se rapporte plus au contexte de <code>monitorTemperature</code> mais à celui de la fonction anonyme. </p>\n<p>Mais comment on va s&#39;en sortir? C&#39;est là que les <em>closures</em> vont venir à notre secours. Nous allons garder une référence vers le contexte de la fonction :</p>\n<x-code-prism language='javascript' line-numbers='true'>var cpu = {\n    temperature : 65,\n\n    monitorTemperature : function(){\n        var self = this;\n        var monitor = setInterval(function(){\n            var temp = self.temperatue;\n            if(temp > 180){\n                console.log(\"Fire, fire, please help\"); \n            } else {\n                console.log(\"Temperature at \"+ temp + \"° is ok\");\n            }\n        }, 1000);\n\n        setTimeout(function(){\n            clearInterval(monitor);\n        }, 5000);\n    }\n}\ncpu.monitorTemperature();\n//stdout: Temperature at 65° is ok\n//stdout: Temperature at 65° is ok\n//stdout: Temperature at 65° is ok\n//stdout: Temperature at 65° is ok</x-code-prism><p>Et voilà !</p>\n<p>Ce même exemple avec une <em>pseudo classe</em>, donne cela:</p>\n<x-code-prism language='javascript' line-numbers='true'>function Cpu(){\n    this.cores = 2;\n    this.vendor = 'Intel';\n    this.ghz = 2.13;\n    this.modelName = 'Intel(R) Core(TM)2 Duo CPU P7450 @ 2.13GHz';\n\n    this.isMultiCore = function(){\n        return this.cores > 0;\n    }\n}\nvar cpu = new Cpu();\nconsole.log(cpu.isMultiCore());\n//stdout: true</x-code-prism><p>Le mot clé <code>new</code> peut être compris comme une sorte d&#39;alias à la méthode <code>call</code>. En gros <code>new Cpu()</code> revient à faire <code>Cpu.call({})</code>, c&#39;est-à-dire à créer un nouvel objet (le <code>{}</code>) et à le passer en tant que contexte de fonction. </p>\n<p>Une erreur fréquente est d&#39;utiliser <code>this</code> au sein d&#39;une fonction en vue de l&#39;utiliser comme une pseudo classe et de l&#39;appeler sans le mot clé <code>new</code>. Et là, c&#39;est le drame: <code>this</code> va se référer au contexte dans lequel il a été appelé. Prenons l&#39;exemple:</p>\n<x-code-prism language='javascript' line-numbers='true'>function UnixProcess(){\n    this.pid = process.pid;\n    console.log(this);\n}\n\nvar unixProcess = new UnixProcess();\nconsole.log(unixProcess);\n//stdout: { pid: 6565 }</x-code-prism><p>Si vous exécutez ce code dans la console node.js et qu&#39;ensuite vous lancer <code>UnixProcess()</code> (sans le <code>new</code>), vous allez retrouvez toutes les variables globales, et oui... de même que si vous lancez <code>console.log(this)</code> à l&#39;extérieur d&#39;une fonction. </p>\n<h2 id=\"dans-la-vrai-vie\">Dans la vrai vie</h2>\n<p>Voici un template d&#39;un plugin jQuery, on se penchant dessus on voit bien l&#39;usage du mot clé <code>this</code> qui permet d&#39;accéder au contexte de l&#39;élément jQuery (toujours un tableau d&#39;où les <code>this.each</code>) ou de l&#39;objet <code>Plugin</code>:</p>\n<x-code-prism language='javascript' line-numbers='true'>/*\n* $('#target').pluginName(options); calls Plugin.init(options)\n* $('#target').pluginName('aMethod'); calls public method Plugin.aMethod();\n*/\n(function( $ ){\n    \"use strict\";\n\n    //default options\n    var defaults = {\n\n    };\n\n    var Plugin = {\n\n        //initialisation code\n        init: function(options){\n            var self = this;\n            this.options = $.extend(true, {}, defaults, options);\n            return this.each(function() {\n                var $elt = $(this);\n                $elt.data('pluginName', self.options);\n\n            });\n        },\n\n        //a plublic method \n        aMethod : function(){\n            this.each(function() {\n                var $elt = $(this);\n\n            });\n        },\n\n        //a private method\n        _anotherMethod : function(){\n\n        },\n\n        //destroy code\n        destroy : function(){\n            this.each(function() {\n             var $elt = $(this);\n\n            });\n        }\n    };\n\n    $.fn.pluginName = function( method ) {\n        if ( Plugin[method] ) {\n            if(/^_/.test(method)){\n                $.error( 'Trying to call a private method ' + method + ' on jQuery.pluginName' );\n            } else {\n                return Plugin[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n            }\n        } else if ( typeof method === 'object' || ! method) {\n            return Plugin.init.apply( this, arguments );\n        } else {\n           $.error( 'Method ' + method + ' does not exist on jQuery.pluginName' );\n        }\n    };\n\n})( jQuery );</x-code-prism><h2 id=\"pour-aller-plus-loin\">Pour aller plus loin</h2>\n<p>Je vous conseil de lire ces deux ouvrages écrits par les gourous du JavaScript : </p>\n<ul>\n<li><a href=\"http://www.amazon.fr/JavaScript-The-Good-Parts-ebook/dp/B0026OR2ZY/ref=sr_1_1?ie=UTF8&amp;qid=1378985428&amp;sr=8-1&amp;keywords=javascript+the+good+parts\">JavaScript The Good Parts</a> de Douglas Crockford</li>\n<li><a href=\"http://www.amazon.fr/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/ref=sr_1_1?ie=UTF8&amp;qid=1378985699&amp;sr=8-1&amp;keywords=secret+of+the+javascript+ninjas\">Secrets of the JavaScript Ninja</a> de John Resig</li>\n</ul>\n",
				"layout": "post",
				"title": "JavaScript le mot clé this",
				"author": "@kramp",
				"date": "2013-08-12 18:36",
				"comments": true,
				"categories": "JavaScript"
			},
			"fr": {
				"src": "src/posts/2013-08-12-javascript-le-mot-cle-this-fr.md",
				"dest": "tmp/fr/posts/2013-08-12-javascript-le-mot-cle-this.html",
				"url": "posts/2013-08-12-javascript-le-mot-cle-this.html",
				"fullUrl": "http://krampstudio.com/fr/posts/2013-08-12-javascript-le-mot-cle-this.html",
				"blogName": "Krampstudio",
				"lang": "fr",
				"fileTitle": "2013-08-12-javascript-le-mot-cle-this",
				"content": "<p><img src=\"../img/posts/images/js-badge.png\" alt=\"JS Logo\" title=\"js.this\"></p>\n<p>Si comme moi vous aviez plutôt l&#39;habitude des langages de programmation orientés objets <em>classiques</em>, vous avez sans doute aussi été surpris (entre autre) de l&#39;utilisation du mot clé <code>this</code> en JavaScript. Il y a quelques temps déjà, l&#39;envie de comprendre cette particularité m&#39;a permis d&#39;appréhender les concepts fondateurs du langage. Au final, en essayant de comprendre l&#39;utilisation de <code>this</code>, ma vision du langage a complètement changé et depuis c&#39;est avec plaisir que je code en JS.\nJe vais donc essayer de retracer ce cheminement, en expliquant quelques principes simples mais tellement important. Ça devrait éviter quelques prises de têtes.</p>\n<p>En fait le mot clé <code>this</code> n&#39;est pas du tout ce que l&#39;on croit. Ce n&#39;est pas une référence vers une instance d&#39;un objet, mais le contexte de la fonction. Pour comprendre cela, il y a quelques concepts du langage qu&#39;il faut explorer :</p>\n<ul>\n<li>le type <code>Function</code> est un objet de première classe (<a href=\"http://en.wikipedia.org/wiki/First-class_function\">First-class function</a>), </li>\n<li>le portée des variables locales est hissée au niveau de la fonction, </li>\n<li>le mot clé <code>new</code> n&#39;est seulement qu&#39;un alias </li>\n</ul>\n<!-- more -->\n\n<p><em>Tous les exemples présentés ont été testés avec <a href=\"http://nodejs.org/\">node.js</a> version 0.10.15. Vous pouvez les reproduire et aller plus en vous amusant avec <a href=\"http://nodejs.org/api/repl.html\">REPL</a> (la console node).</em> </p>\n<h2 id=\"la-fonction-citoyenne-de-1-re-classe\">La fonction, citoyenne de 1ère classe</h2>\n<p><a name='function-first-class-object'></a></p>\n<p>On dit du type <code>Function</code> que c&#39;est un objet de première classe car ce type permet de faire tout ce qu&#39;un objet peut faire dans le langage. En gros l&#39;instance d&#39;une fonction se comporte comme un objet. Voici quelques caractéristiques qui illustre ce principe:</p>\n<ul>\n<li>Chaque fonction est une instance du type <code>Object</code>. Bien que <code>typeof aFunction</code> renvoie <code>function</code>, <code>insanteof</code> nous permet de vérifier l&#39;affiliation de la fonction au type <code>Object</code>.</li>\n</ul>\n<p><x-code-prism language=\"javascript\" line-numbers=\"true\">\nfunction test() {\n    //do stuffs\n};\nconsole.log(test instanceof Object);\n//stdout: true</p>\n<p>console.log(require(&#39;util&#39;).inspect(test, true));\n//stdout: { [Function: test]\n//stdout:   [length]: 0,\n//stdout:   [name]: &#39;test&#39;,\n//stdout:   [arguments]: null,\n//stdout:   [caller]: null,\n//stdout:   [prototype]: { [constructor]: [Circular] } }\n</x-code-prism></p>\n<ul>\n<li>Une fonction peut être assignée à une variable, comme un objet ou n&#39;importe quel type. </li>\n</ul>\n<x-code-prism language='javascript' line-numbers='true'>var getOs = function get_os() {\n    return 'windows';\n}\nconsole.log( typeof getOs ); \n//stdout: 'function'</x-code-prism><ul>\n<li>une fonction peut être passée en paramètre d&#39;une fonction, permettant ainsi d&#39;utiliser (en autre) le pattern du <code>callback</code>, très utile pour la programmation événementielle et les traitements asynchrones. </li>\n</ul>\n<x-code-prism language='javascript' line-numbers='true'>function os_scanner( getOs ) {\n\n    console.log( typeof arguments[0] );\n\n    if( getOs() == 'windows' ){\n        console.log( 'Oh crap' );\n    } else {\n        console.log( \"I know that, it's a Unix\" );\n    }\n}\n\nos_scanner(getOs);\n//stdout: 'function'\n//stdout: 'Oh Crap'</x-code-prism><ul>\n<li>Une fonction étant une instance, c&#39;est une structure de données. Elle contient des propriétés intrinsèques (<code>name</code>, <code>arguments</code>, etc.), mais on peut aussi lui assigner de nouvelles propriétés.</li>\n</ul>\n<x-code-prism language='javascript' line-numbers='true'>get_os.arch='x86';\n\nconsole.log(require('util').inspect(get_os, true));\n//stdout: { [Function: get_os]\n//stdout:   [length]: 0,\n//stdout:   [name]: 'get_os',\n//stdout:   [arguments]: null,\n//stdout:   [caller]: null,\n//stdout:   [prototype]: { [constructor]: [Circular] },\n//stdout:   arch: 'x86' }</x-code-prism><p>Maintenant, nous savons que la fonction est un des concepts central du langage JavaScript, vous me direz, pas étonnant pour un langage fonctionnel, un peu plus pour un langage orienté objet (même sans classe, mais ça c&#39;est une autre histoire).</p>\n<h2 id=\"scope\">Scope</h2>\n<p>Encore une fois, le langage se distingue de beaucoup de ses confrères sur le point du scope. La portée des variables en JavaScript se propage au niveau de la fonction et non du bloc. Bien entendu les variables globales sont accessibles partout (de tout façon personne n&#39;utilise jamais de variables globales, n&#39;est-ce pas?), par contre les variables <em>locales</em> sont locales à la fonction dans la laquelle elles ont été déclarées. </p>\n<p>Quand on tente d&#39;accéder à une variable non définie, on a une jolie erreur:</p>\n<x-code-prism language='javascript' line-numbers='true'>function get_os(){\n    var arch = 'x86';\n}\n\nfunction get_arch(){\n    console.log(arch);\n}\n\nget_arch();\n//stdout: ReferenceError: arch is not defined\n//stdout:    at get_arch (repl:1:34)\n//stdout:    at [...]</x-code-prism><p>Dans un langage où la portée des variables est le bloc, on pourrait s&#39;attendre à la même chose, mais:</p>\n<x-code-prism language='javascript' line-numbers='true'>function get_arch(){\n    if(false){\n        var arch = 'windows';\n    }\n    console.log(arch);\n}\n\nget_arch();\n//stdout: undefined</x-code-prism><p>La variable <code>arch</code> est donc <strong>accessible</strong> à toute la fonction, même si elle n&#39;a pas encore été définie (d&#39;où le <code>undefined</code>). Ce code est équivalent à:</p>\n<x-code-prism language='javascript' line-numbers='true'>function get_arch(){\n    var arch;\n    if(false){\n        arch = 'windows';\n    }\n    console.log(arch);\n}\n\nget_arch();\n//stdout: undefined</x-code-prism><p>JavaScript intègre le principe du <em>hoisting</em>, c&#39;est-à-dire que toutes les variables locales à une fonction sont accessibles dès le début de celle-ci. Une des bonnes pratiques veut que toutes les variables utilisées soient déclarées en début de fonction. </p>\n<p>Ce type de comportement peut nous paraître limitant. Ce serait la cas si JS n&#39;avais pas un mécanisme de <em>closure</em>. La closure est un principe tout simple mais très puissant, qui donne accès aux variables des scopes englobant dans le scope englobé. Comme la portée du scope est la fonction, alors on peut dire que si une fonction en contient une autre, alors la fonction contenue a accès aux variables de la fonction contenante. Comme souvent en informatique (et avec ma prose) un principe peut être simple mais compliqué à expliquer, alors un bon exemple devrait éclaircir ce point:</p>\n<x-code-prism language='javascript' line-numbers='true'>function desc_os(){\n    var os = 'GNU/Linux';\n    var version = '3.5.0-37-generic';\n    var arch = 'x86_64';\n    var distrib = 'Ubuntu';\n\n    function format(){\n        return os + ' ' + version + ' ' + arch + ' ' + distrib;\n    }\n\n    return format();\n}\n\nconsole.log(desc_os());\n//stdout: GNU/Linux 3.5.0-37-generic x86_64 Ubuntu</x-code-prism><p>Dans l&#39;exemple ci-dessus, la fonction <code>format</code> <em>capture</em> les valeurs des variables de la fonction <code>desc_os</code> au moment de son appel.</p>\n<h2 id=\"le-contexte-de-la-fonction-this-\">Le contexte de la fonction: <code>this</code></h2>\n<p><img src=\"../img/posts/images/this.png\" alt=\"This\" title=\"Source theburnsider dot com slash stop this\"></p>\n<p>Comme nous l&#39;avons vus dans la <a href=\"#function-first-class-object\">première section</a> chaque fonction est aussi un objet. De plus, chaque fonction <em>hérite</em> de plusieurs membres de manière systématiques. </p>\n<p>Les propriétés suivantes sont accessible à partir de chaque fonction  : </p>\n<ul>\n<li><code>name</code> : le nom de la fonction.</li>\n<li><code>length</code> : le nombre d&#39;arguments déclarés.</li>\n<li><code>arguments</code> : un objet qui contient la liste des arguments passés (attention, ce n&#39;est pas un <code>Array</code> mais un objet qui se comporte comme tel).</li>\n<li><code>caller</code> : contient une référence à la fonction appelante.</li>\n</ul>\n<x-code-prism language='javascript' line-numbers='true'>function showFileSystem(mountPoint){\n    console.log(showFileSystem.name);\n    console.log(showFileSystem.length);\n    console.log(showFileSystem.arguments[0]); //also available as the `arguments` variable\n    console.log(showFileSystem.caller.name);\n}\nfunction discCheck(){\n    showFileSystem('/dev/sda');\n}\n\ndiscCheck();\n\n//stdout: showFileSystem\n//stdout: 1\n//stdout: /dev/sda\n//stdout: discCheck</x-code-prism><p>Il existe d&#39;autre propriétés qui peuvent changer entre les implémentions ou dont l&#39;usage sort du scope de ce post (à moins d&#39;une closure... bon, d&#39;accord c&#39;est nul ;).</p>\n<p>Parmi les méthodes accessibles, les suivantes nous intéressent particulièrement:</p>\n<ul>\n<li><code>call</code> : permet d&#39;exécuter la fonction</li>\n<li><code>apply</code> : permet aussi d&#39;exécuter la fonction </li>\n<li><code>bind</code> : créé une nouvelle fonction associée à un nouveau contexte </li>\n</ul>\n<p><code>call</code> et <code>apply</code> ont la même finalité, seul la manière dont les paramètres sont passés changent. On pourrait penser que ces fonctions sont peu utiles, comme dans l&#39;exemple suivant:</p>\n<x-code-prism language='javascript' line-numbers='true'>function kill(pid, signal){\n    if(!signal){\n        signal = '9';\n    }\n    console.log('Running: kill -'+ signal  +  ' ' + pid);\n}\n\n//usual way to invoke function\nkill(1234, 'TERM');\n\n//invoke the function using it's own method call\nkill.call(null, 1234);\n\n//invoke the function using it's own method apply\nkill.apply(null, [1234, 'PIPE']);\n\n//stdout: Running: kill -TERM 1234\n//stdout: Running: kill -9 1234\n//stdout: Running: kill -PIPE 1234</x-code-prism><p>Dans ce cas, il n&#39;y a effectivement pas un très grand intérêt, les méthodes <code>call</code> et <code>apply</code> semblent identiques. La méthode <code>apply</code> a pour particularité d&#39;utiliser un tableau pour les paramètres ce qui facilite les exécutions dynamiques de fonction, par exemple :</p>\n<x-code-prism language='javascript' line-numbers='true'>var fs = require('fs');\n\n//returns an array of files name for a service\nfunction get_logs(service){\n    var logDir = '/var/log/' + service + '/';\n    var logFiles = fs.readdirSync(logDir);\n    if(logFiles && logFiles instanceof Array){\n        return logFiles;\n    }\n    return [];\n}\n\n//merge the content of the array of files\nfunction merge(files){\n    var merged = '';\n    for(var i in files){\n        merged += fs.readSync(files[i]);\n    }\n    console.log(files.length +' files merged'); \n}\n\n//backup each of the files\nfunction backup(files){\n    for(var i in files){\n        fs.createReadStream(files[i]).pipe(fs.createWriteStream(files[i] + '.backup'));\n    }\n    console.log(files.length +' files backed up'); \n}\n\n//do actions on logs of a service\nfunction doOnLogs(service, action){\n    //action is a callback, on which we apply arguments dynamically\n    if(typeof action === 'function'){\n        action.apply(null, get_logs(service));\n    }\n}\n\nconsole.log(get_logs('redis'));\n\n//stdout: ['redis-server.log', redis-server.1.log']\n\n\ndoOnLogs('redis', merge);\ndoOnLogs('redis', backup);\n\n//stdout: 2 files merged\n//stdout: 2 files backed up</x-code-prism><p>C&#39;est bon, j&#39;arrête de vous tenir en haleine, maintenant je vais vous parlez du premier paramètre de ces méthodes, car vous vous demandez quel est donc ce paramètre qui a la valeur <code>null</code>? Et bien ce paramètre c&#39;est <em>le contexte de la fonction</em>, il permet de définir la valeur du mot clé <code>this</code> au sein de la fonction.</p>\n<x-code-prism language='javascript' line-numbers='true'>var cpu = {\n    cores : 2,\n    vendor : 'Intel',\n    ghz : 2.13,\n    model : 'Intel(R) Core(TM)2 Duo CPU P7450 @ 2.13GHz',\n\n    isMultiCore : function(){\n        return this.cores > 1;\n    }\n};\n\nconsole.log(cpu.isMulticore());\n//stdout: true\n\nvar old_cpu = {\n    cores : 1\n};\n\ncpu.isMulticore.call(old_cpu);\n//stdout: false</x-code-prism><p>Dans l&#39;exemple ci-dessus, nous avons modifié le contexte de la fonction. Lors d&#39;un appel de méthode avec l&#39;opérateur <code>.</code> classique, le contexte de fonction est celui de l&#39;objet, donc dans <code>cpu.isMultiCore()</code>, <code>this</code> se rapporte à l&#39;objet <code>cpu</code>. Dans le 2nd appel, nous utilisons la méthode <code>call</code> pour changer le contexte de la fonction: <code>this</code> fera référence à <code>old_cpu</code>.</p>\n<p>Jusqu&#39;ici tout va bien. On a tous compris (enfin j&#39;espère) que <code>this</code> ne se rapporte pas à une instance comme dans d&#39;autres langages mais bien au contexte. Corsons un peu les choses, avec le code suivant:</p>\n<x-code-prism language='javascript' line-numbers='true'>var cpu = {\n    temperature : 65,\n\n    monitorTemperature : function(){\n        var monitor = setInterval(function(){\n            var temp = this.temperatue;\n            if(temp > 180){\n                console.log(\"Fire, fire, please help\"); \n            } else {\n                console.log(\"Temperature at \"+ temp + \"° is ok\");\n            }\n        }, 1000);\n\n        setTimeout(function(){\n            clearInterval(monitor);\n        }, 5000);\n    }\n}\ncpu.monitorTemperature();\n//stdout: Temperature at undefined° is ok\n//stdout: Temperature at undefined° is ok\n//stdout: Temperature at undefined° is ok\n//stdout: Temperature at undefined° is ok</x-code-prism><p>Oh!(Ndt: traduction de  <em>WTF!</em>) C&#39;est quoi ce vieux <code>undefined</code>? Et bien oui, si vous avez suivis, chaque fonction a un contexte et ce contexte est accessible via le mot clé <code>this</code>. De plus, comme le scope porte sur la fonction et que nous déclarons une fonction anonyme comme <em>callback</em> de <code>setInterval</code> et bien <code>this</code> ne se rapporte plus au contexte de <code>monitorTemperature</code> mais à celui de la fonction anonyme. </p>\n<p>Mais comment on va s&#39;en sortir? C&#39;est là que les <em>closures</em> vont venir à notre secours. Nous allons garder une référence vers le contexte de la fonction :</p>\n<x-code-prism language='javascript' line-numbers='true'>var cpu = {\n    temperature : 65,\n\n    monitorTemperature : function(){\n        var self = this;\n        var monitor = setInterval(function(){\n            var temp = self.temperatue;\n            if(temp > 180){\n                console.log(\"Fire, fire, please help\"); \n            } else {\n                console.log(\"Temperature at \"+ temp + \"° is ok\");\n            }\n        }, 1000);\n\n        setTimeout(function(){\n            clearInterval(monitor);\n        }, 5000);\n    }\n}\ncpu.monitorTemperature();\n//stdout: Temperature at 65° is ok\n//stdout: Temperature at 65° is ok\n//stdout: Temperature at 65° is ok\n//stdout: Temperature at 65° is ok</x-code-prism><p>Et voilà !</p>\n<p>Ce même exemple avec une <em>pseudo classe</em>, donne cela:</p>\n<x-code-prism language='javascript' line-numbers='true'>function Cpu(){\n    this.cores = 2;\n    this.vendor = 'Intel';\n    this.ghz = 2.13;\n    this.modelName = 'Intel(R) Core(TM)2 Duo CPU P7450 @ 2.13GHz';\n\n    this.isMultiCore = function(){\n        return this.cores > 0;\n    }\n}\nvar cpu = new Cpu();\nconsole.log(cpu.isMultiCore());\n//stdout: true</x-code-prism><p>Le mot clé <code>new</code> peut être compris comme une sorte d&#39;alias à la méthode <code>call</code>. En gros <code>new Cpu()</code> revient à faire <code>Cpu.call({})</code>, c&#39;est-à-dire à créer un nouvel objet (le <code>{}</code>) et à le passer en tant que contexte de fonction. </p>\n<p>Une erreur fréquente est d&#39;utiliser <code>this</code> au sein d&#39;une fonction en vue de l&#39;utiliser comme une pseudo classe et de l&#39;appeler sans le mot clé <code>new</code>. Et là, c&#39;est le drame: <code>this</code> va se référer au contexte dans lequel il a été appelé. Prenons l&#39;exemple:</p>\n<x-code-prism language='javascript' line-numbers='true'>function UnixProcess(){\n    this.pid = process.pid;\n    console.log(this);\n}\n\nvar unixProcess = new UnixProcess();\nconsole.log(unixProcess);\n//stdout: { pid: 6565 }</x-code-prism><p>Si vous exécutez ce code dans la console node.js et qu&#39;ensuite vous lancer <code>UnixProcess()</code> (sans le <code>new</code>), vous allez retrouvez toutes les variables globales, et oui... de même que si vous lancez <code>console.log(this)</code> à l&#39;extérieur d&#39;une fonction. </p>\n<h2 id=\"dans-la-vrai-vie\">Dans la vrai vie</h2>\n<p>Voici un template d&#39;un plugin jQuery, on se penchant dessus on voit bien l&#39;usage du mot clé <code>this</code> qui permet d&#39;accéder au contexte de l&#39;élément jQuery (toujours un tableau d&#39;où les <code>this.each</code>) ou de l&#39;objet <code>Plugin</code>:</p>\n<x-code-prism language='javascript' line-numbers='true'>/*\n* $('#target').pluginName(options); calls Plugin.init(options)\n* $('#target').pluginName('aMethod'); calls public method Plugin.aMethod();\n*/\n(function( $ ){\n    \"use strict\";\n\n    //default options\n    var defaults = {\n\n    };\n\n    var Plugin = {\n\n        //initialisation code\n        init: function(options){\n            var self = this;\n            this.options = $.extend(true, {}, defaults, options);\n            return this.each(function() {\n                var $elt = $(this);\n                $elt.data('pluginName', self.options);\n\n            });\n        },\n\n        //a plublic method \n        aMethod : function(){\n            this.each(function() {\n                var $elt = $(this);\n\n            });\n        },\n\n        //a private method\n        _anotherMethod : function(){\n\n        },\n\n        //destroy code\n        destroy : function(){\n            this.each(function() {\n             var $elt = $(this);\n\n            });\n        }\n    };\n\n    $.fn.pluginName = function( method ) {\n        if ( Plugin[method] ) {\n            if(/^_/.test(method)){\n                $.error( 'Trying to call a private method ' + method + ' on jQuery.pluginName' );\n            } else {\n                return Plugin[method].apply( this, Array.prototype.slice.call( arguments, 1 ));\n            }\n        } else if ( typeof method === 'object' || ! method) {\n            return Plugin.init.apply( this, arguments );\n        } else {\n           $.error( 'Method ' + method + ' does not exist on jQuery.pluginName' );\n        }\n    };\n\n})( jQuery );</x-code-prism><h2 id=\"pour-aller-plus-loin\">Pour aller plus loin</h2>\n<p>Je vous conseil de lire ces deux ouvrages écrits par les gourous du JavaScript : </p>\n<ul>\n<li><a href=\"http://www.amazon.fr/JavaScript-The-Good-Parts-ebook/dp/B0026OR2ZY/ref=sr_1_1?ie=UTF8&amp;qid=1378985428&amp;sr=8-1&amp;keywords=javascript+the+good+parts\">JavaScript The Good Parts</a> de Douglas Crockford</li>\n<li><a href=\"http://www.amazon.fr/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X/ref=sr_1_1?ie=UTF8&amp;qid=1378985699&amp;sr=8-1&amp;keywords=secret+of+the+javascript+ninjas\">Secrets of the JavaScript Ninja</a> de John Resig</li>\n</ul>\n",
				"layout": "post",
				"title": "JavaScript le mot clé this",
				"author": "@kramp",
				"date": "2013-08-12 18:36",
				"comments": true,
				"categories": "JavaScript"
			}
		}
	}
}
